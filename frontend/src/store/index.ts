// === Ce fichier est le centre de contr√¥le qui g√®re toutes les donn√©es de l'application === /workspaces/TaskManagerLatestVersion/frontend/src/store/index.ts
// Explication simple : Ce fichier est comme le cerveau de l'application qui stocke et organise toutes les informations - tes t√¢ches, clients, minuteurs et param√®tres - pour que tous les √©crans puissent y acc√©der facilement.
// Explication technique : Configuration centrale du store Redux avec Redux Toolkit, regroupant tous les reducers des diff√©rents slices et d√©finissant le middleware personnalis√© et les types TypeScript globaux.
// Utilis√© dans : Le composant racine de l'application (App.tsx ou _app.tsx) pour fournir l'√©tat global √† tous les composants via Provider.
// Connect√© √† : Tous les slices Redux (auth, ui, tasks, etc.), hooks personnalis√©s, et indirectement √† tous les composants qui utilisent des donn√©es via useSelector/useDispatch.

import { configureStore } from '@reduxjs/toolkit';
import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';
import authReducer from './slices/authSlice';
import uiReducer from './slices/uiSlice';
import tasksReducer from './slices/tasksSlice';
import clientsReducer from './slices/clientsSlice';
import gamificationReducer from './slices/gamificationSlice';
import timerReducer from './slices/timerSlice';
import taskImpactReducer from './slices/taskImpactSlice';
import profitabilityReducer from './slices/profitabilitySlice';
import objectivesReducer from './slices/objectivesSlice';

// === D√©but : Importation des types pour le middleware ===
// Explication simple : Ces lignes importent des outils sp√©ciaux pour s'assurer que le code fonctionne correctement, comme quand tu prends les bons ustensiles avant de cuisiner.
// Explication technique : Importation des types TypeScript n√©cessaires de Redux Toolkit pour typer correctement le middleware personnalis√©, assurant une meilleure s√©curit√© de type.
// Importations n√©cessaires pour le typage du middleware
import { Middleware, MiddlewareAPI, Dispatch, AnyAction } from '@reduxjs/toolkit';
// === Fin : Importation des types pour le middleware ===

// === D√©but : D√©finition du middleware de surveillance des timers ===
// Explication simple : Ce petit programme surveille toutes les actions li√©es aux chronom√®tres et affiche des messages dans la console pour aider les d√©veloppeurs √† comprendre ce qui se passe.
// Explication technique : Middleware Redux typ√© qui intercepte toutes les actions li√©es au timer, journalise l'action et l'√©tat avant/apr√®s dans la console, facilitant le d√©bogage des op√©rations de timer.
// Ajout des types explicites au middleware
const timerActionMiddleware: Middleware = 
  (store: MiddlewareAPI) => 
  (next: Dispatch) => 
  (action: AnyAction) => {
    if (action.type.startsWith('timer/')) {
      console.log('‚ö° Action timer d√©tect√©e:', action);
      console.log('üìä √âtat avant:', store.getState().timer);
      const result = next(action);
      console.log('üìä √âtat apr√®s:', store.getState().timer);
      return result;
    }
    return next(action);
  };
// === Fin : D√©finition du middleware de surveillance des timers ===

// === D√©but : Configuration du store Redux central ===
// Explication simple : Ce bloc cr√©e le grand cerveau qui va retenir toutes les informations de l'application, comme une √©norme biblioth√®que bien organis√©e avec diff√©rentes sections.
// Explication technique : Configuration du store Redux global avec configureStore, combinant tous les reducers des diff√©rents domaines fonctionnels et ajoutant le middleware personnalis√© √† la cha√Æne de middlewares par d√©faut.
// D√©finir le store Redux
export const store = configureStore({
  reducer: {
    auth: authReducer,
    ui: uiReducer,
    tasks: tasksReducer,
    clients: clientsReducer,
    gamification: gamificationReducer,
    timer: timerReducer,
    taskImpact: taskImpactReducer,
    profitability: profitabilityReducer,
    objectives: objectivesReducer
  },
  middleware: (getDefaultMiddleware) => 
    getDefaultMiddleware().concat(timerActionMiddleware)
});
// === Fin : Configuration du store Redux central ===

// === D√©but : Fonction de r√©initialisation du store ===
// Explication simple : Cette fonction est comme un grand bouton "Recommencer" qui remet toutes les informations √† z√©ro quand quelque chose ne va pas.
// Explication technique : Utilitaire qui dispatch une action sp√©ciale pour r√©initialiser l'√©tat complet du store, utile pour les tests ou lors de d√©connexions utilisateur, avec journalisation dans la console.
// Apr√®s la d√©finition du store, ajoutez:
// Force une r√©initialisation du store pour s'assurer que tous les slices sont correctement instanci√©s
export function resetStore() {
  store.dispatch({ type: 'RESET_STORE' });
  console.log("Store r√©initialis√©", store.getState());
}
// === Fin : Fonction de r√©initialisation du store ===

// === D√©but : Exportation des types TypeScript pour le store ===
// Explication simple : Ces lignes cr√©ent des √©tiquettes sp√©ciales qui aident l'ordinateur √† comprendre quelles informations sont stock√©es et comment les utiliser correctement.
// Explication technique : D√©finition et exportation des types TypeScript d√©riv√©s du store pour permettre un typage fort lors de l'utilisation de useSelector et useDispatch dans les composants.
// Export des types pour TypeScript
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
// === Fin : Exportation des types TypeScript pour le store ===

// === D√©but : D√©finition des interfaces d'√©tat explicites ===
// Explication simple : Ces blocs d√©crivent en d√©tail √† quoi ressemblent les diff√©rentes parties des informations stock√©es, comme une fiche qui explique le contenu de chaque tiroir.
// Explication technique : D√©finition manuelle d'interfaces TypeScript pour chaque slice, offrant une alternative aux types inf√©r√©s automatiquement, facilitant la documentation et la r√©f√©rence dans les composants.
// D√©finir des types explicites pour les √©tats des slices
export interface AuthState {
  user?: {
    name?: string;
    email?: string;
    profile?: {
      avatar?: string;
    };
  } | null;
  isAuthenticated?: boolean;
  token?: string | null;
  loading?: boolean;
  error?: string | null;
}

export interface GamificationState {
  level?: number;
  experience?: number;
  actionPoints?: number;
  badges?: any[];
}

export interface UIState {
  darkMode?: boolean;
  sidebarOpen?: boolean;
}
// === Fin : D√©finition des interfaces d'√©tat explicites ===
