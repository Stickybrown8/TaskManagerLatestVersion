/*
 * GESTIONNAIRE DE SYST√àME DE JEU - frontend/src/hooks/useGamification.ts
 *
 * Explication simple:
 * Ce fichier cr√©e un syst√®me qui ajoute du fun √† l'application. C'est comme un jeu o√π tu
 * gagnes des points en faisant des actions (cr√©er des t√¢ches, terminer un projet...). Tu
 * peux aussi gagner des niveaux et des badges sp√©ciaux appel√©s "achievements". Quand tu
 * r√©ussis quelque chose d'important, l'application lance m√™me des confettis pour te f√©liciter!
 *
 * Explication technique:
 * Hook personnalis√© React qui encapsule toute la logique de gamification de l'application,
 * permettant d'ajouter de l'exp√©rience aux utilisateurs, de v√©rifier les achievements d√©bloqu√©s,
 * et de g√©rer les retours visuels de r√©compense via des notifications et effets de confettis.
 *
 * O√π ce fichier est utilis√©:
 * Import√© dans diff√©rents composants qui d√©clenchent des actions m√©ritant des points ou
 * pouvant d√©bloquer des achievements, comme les composants de gestion des t√¢ches, des clients
 * ou des projets.
 *
 * Connexions avec d'autres fichiers:
 * - Utilise le hook useAppDispatch depuis '../hooks' pour dispatcher des actions Redux
 * - Importe l'action addNotification depuis '../store/slices/uiSlice'
 * - Communique avec l'API backend via axios pour mettre √† jour l'exp√©rience et v√©rifier les achievements
 * - Interagit avec le syst√®me d'√©v√©nements personnalis√©s pour d√©clencher des effets visuels
 */

// === D√©but : Importation des d√©pendances et configuration ===
// Explication simple : On prend tous les outils dont on a besoin pour faire fonctionner notre syst√®me de jeu, comme quand tu sors tes jouets avant de commencer √† jouer.
// Explication technique : Importation des hooks React, de la biblioth√®que axios pour les requ√™tes HTTP, du hook Redux personnalis√© et de l'action pour les notifications, ainsi que configuration de l'URL de l'API.
import { useState } from 'react';
import axios from 'axios';
import { useAppDispatch } from '../hooks';
import { addNotification } from '../store/slices/uiSlice';

const API_URL = process.env.REACT_APP_API_URL || 'https://task-manager-api-yx13.onrender.com';
// === Fin : Importation des d√©pendances et configuration ===

// === D√©but : D√©finition de l'interface Achievement ===
// Explication simple : On explique √† l'ordinateur √† quoi ressemble un badge ou une r√©compense dans notre jeu, comme quand tu d√©cris les r√®gles d'un jeu avant de commencer.
// Explication technique : D√©claration d'une interface TypeScript qui d√©finit la structure des objets Achievement, avec leurs propri√©t√©s typ√©es pour assurer la coh√©rence des donn√©es.
export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon?: string;
  points: number;
}
// === Fin : D√©finition de l'interface Achievement ===

// === D√©but : D√©finition du hook principal useGamification ===
// Explication simple : On cr√©e une bo√Æte √† outils sp√©ciale qui permet d'ajouter du fun dans l'application, avec des points, des niveaux et des confettis!
// Explication technique : D√©claration du hook personnalis√© qui expose les fonctions et √©tats li√©s √† la gamification, encapsulant la logique de gestion des points d'exp√©rience et des achievements.
export const useGamification = () => {
  const dispatch = useAppDispatch();
  const [loading, setLoading] = useState(false);
// === Fin : D√©finition du hook principal useGamification ===

  // === D√©but : Fonction d'ajout d'exp√©rience ===
  // Explication simple : Cette fonction ajoute des points √† ton score quand tu fais une bonne action, et si tu as assez de points, tu montes de niveau avec des confettis!
  // Explication technique : Fonction asynchrone qui envoie une requ√™te √† l'API pour cr√©diter des points d'exp√©rience √† l'utilisateur, g√®re la mont√©e de niveau avec notification et effets visuels.
  const addExperience = async (points: number, reason: string = 'Action compl√©t√©e') => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      if (!token) throw new Error("Token d'authentification manquant");

      const response = await axios.post(
        `${API_URL}/api/gamification/experience`,
        { points, reason },
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      // Notification si l'utilisateur a gagn√© un niveau
      if (response.data.levelUp) {
        dispatch(addNotification({
          message: `üéâ Niveau ${response.data.newLevel} atteint! +${response.data.bonusPoints} points bonus`,
          type: 'success'
        }));
        triggerConfetti();
      }

      return response.data;
    } catch (error: any) {
      console.error("Erreur lors de l'ajout d'exp√©rience:", error);
      throw error;
    } finally {
      setLoading(false);
    }
  };
  // === Fin : Fonction d'ajout d'exp√©rience ===

  // === D√©but : V√©rification des achievements ===
  // Explication simple : Cette fonction v√©rifie si tu as r√©ussi √† d√©bloquer des badges sp√©ciaux apr√®s avoir fait certaines actions, comme quand un jeu v√©rifie si tu as battu un record.
  // Explication technique : Fonction asynchrone qui interroge l'API pour v√©rifier et r√©cup√©rer les nouveaux achievements d√©bloqu√©s dans une cat√©gorie sp√©cifique.
  const checkAchievement = async (category: string): Promise<Achievement[]> => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return [];

      const response = await axios.post(
        `${API_URL}/api/gamification/check-achievements`,
        { category },
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      return response.data.achievements || [];
    } catch (error) {
      console.error("Erreur lors de la v√©rification des achievements:", error);
      return [];
    }
  };
  // === Fin : V√©rification des achievements ===

  // === D√©but : Affichage des r√©compenses ===
  // Explication simple : Cette fonction fait appara√Ætre un joli message et des confettis pour te f√©liciter quand tu gagnes un badge sp√©cial, comme quand tes amis t'applaudissent pour une victoire.
  // Explication technique : Fonction qui dispatche une notification stylis√©e pour mettre en √©vidence un achievement d√©bloqu√© et d√©clenche un effet visuel de confettis.
  const showReward = (achievement: Achievement) => {
    dispatch(addNotification({
      message: `üèÜ Achievement d√©bloqu√©: ${achievement.title}`,
      type: 'success'
    }));
    
    triggerConfetti();
  };
  // === Fin : Affichage des r√©compenses ===

  // === D√©but : D√©clenchement des confettis ===
  // Explication simple : Cette fonction fait pleuvoir des confettis color√©s sur l'√©cran pour c√©l√©brer ta r√©ussite, comme lors d'une f√™te d'anniversaire!
  // Explication technique : Fonction qui √©met un √©v√©nement personnalis√© intercept√© par ailleurs dans l'application pour d√©clencher l'animation de confettis.
  const triggerConfetti = () => {
    // Utiliser votre composant ConfettiEffect existant
    const event = new CustomEvent('trigger-confetti');
    window.dispatchEvent(event);
  };
  // === Fin : D√©clenchement des confettis ===

  // === D√©but : Retour des fonctions du hook ===
  // Explication simple : On donne acc√®s √† toutes nos fonctions de jeu pour que d'autres parties de l'application puissent les utiliser, comme quand tu partages tes jouets avec tes amis.
  // Explication technique : Retour d'un objet contenant les fonctions et √©tats expos√©s par le hook, permettant aux composants consommateurs d'utiliser la fonctionnalit√© de gamification.
  return {
    addExperience,
    checkAchievement,
    showReward,
    loading
  };
  // === Fin : Retour des fonctions du hook ===
};