/*
 * WIDGET DE RENTABILIT√â MENSUELLE - frontend/src/components/profitability/MonthlyProfitabilityWidget.tsx
 *
 * Explication simple:
 * Ce fichier cr√©e une bo√Æte sp√©ciale qui affiche combien d'argent tes clients te rapportent 
 * chaque mois. Elle te montre quels clients atteignent leurs objectifs et lesquels non. 
 * Tu peux cliquer sur un bouton pour v√©rifier, et si beaucoup de clients sont rentables, 
 * tu gagnes des points et des confettis apparaissent pour f√™ter √ßa! C'est comme un tableau 
 * de score qui te r√©compense quand ton entreprise va bien.
 *
 * Explication technique:
 * Composant React fonctionnel qui affiche et calcule les m√©triques de rentabilit√© des clients 
 * sur une base mensuelle. Il interagit avec l'API de profitabilit√©, d√©clenche des r√©compenses 
 * gamifi√©es via Redux et peut √™tre affich√© en mode compact ou complet avec des visualisations 
 * de donn√©es.
 *
 * O√π ce fichier est utilis√©:
 * Int√©gr√© dans le tableau de bord principal et potentiellement dans des pages de reporting 
 * financier, offrant une vue d'ensemble de la rentabilit√© des projets clients.
 *
 * Connexions avec d'autres fichiers:
 * - Utilise les hooks Redux personnalis√©s depuis '../../hooks'
 * - Importe le composant ConfettiEffect depuis '../gamification/ConfettiEffect'
 * - Consomme les services profitabilityRewardService et soundService
 * - Interagit avec l'API backend via axios pour r√©cup√©rer les donn√©es de rentabilit√©
 * - Dispatch des actions au slice uiSlice pour les notifications
 */

// === D√©but : Importation des d√©pendances ===
// Explication simple : On prend tous les outils dont on a besoin pour faire fonctionner notre widget, comme quand tu pr√©pares tous tes mat√©riaux avant de construire quelque chose.
// Explication technique : Importation des biblioth√®ques et modules requis, notamment React pour les hooks, Framer Motion pour les animations, les hooks Redux personnalis√©s, et divers services pour la gestion des API et des effets.
// src/components/profitability/MonthlyProfitabilityWidget.tsx

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useAppDispatch, useAppSelector } from '../../hooks';
import { addNotification } from '../../store/slices/uiSlice';
import ConfettiEffect from '../gamification/ConfettiEffect';
import { profitabilityRewardService } from '../../services/profitabilityRewardService';
import { soundService } from '../../services/soundService';
import axios from 'axios';
// === Fin : Importation des d√©pendances ===

// === D√©but : Configuration de l'URL API ===
// Explication simple : On d√©finit l'adresse o√π notre application va chercher les informations sur internet, comme quand tu m√©morises l'adresse de ton √©cole.
// Explication technique : D√©claration de la constante d'URL de l'API en utilisant une variable d'environnement avec une valeur de fallback, pour permettre des environnements de d√©ploiement flexibles.
// Ajouter cette ligne apr√®s les imports
const API_URL = process.env.REACT_APP_API_URL || 'https://task-manager-api-yx13.onrender.com';
// === Fin : Configuration de l'URL API ===

// === D√©but : D√©finition des interfaces TypeScript ===
// Explication simple : On explique √† l'ordinateur √† quoi ressemblent les informations qu'on va utiliser, comme quand tu d√©cris la forme d'un jouet √† quelqu'un.
// Explication technique : D√©claration des interfaces TypeScript qui d√©finissent la structure des props du composant et des donn√©es de rentabilit√© re√ßues de l'API, assurant la s√©curit√© de type.
interface MonthlyProfitabilityWidgetProps {
  displayMode?: 'compact' | 'full';
}

// Ajouter cette interface apr√®s MonthlyProfitabilityWidgetProps
interface ProfitabilityData {
  _id: string;
  clientId: string;
  clientName?: string;
  targetHours: number;
  actualHours: number;
  profitabilityPercentage: number;
}
// === Fin : D√©finition des interfaces TypeScript ===

// === D√©but : D√©claration du composant principal ===
// Explication simple : On commence √† cr√©er notre bo√Æte sp√©ciale qui affichera les informations sur l'argent gagn√©, comme quand tu dessines le contour d'une maison avant de la construire.
// Explication technique : D√©finition du composant fonctionnel React avec typage TypeScript, d√©structuration des props avec valeur par d√©faut pour le mode d'affichage.
const MonthlyProfitabilityWidget: React.FC<MonthlyProfitabilityWidgetProps> = ({
  displayMode = 'full'
}) => {
// === Fin : D√©claration du composant principal ===

  // === D√©but : Initialisation des hooks ===
  // Explication simple : On pr√©pare des bo√Ætes sp√©ciales pour stocker et changer les informations dont notre widget a besoin, comme des tiroirs o√π tu ranges diff√©rentes choses.
  // Explication technique : Configuration des hooks React et Redux - dispatcher pour les actions, √©tats locaux pour g√©rer le chargement, les erreurs, les donn√©es de rentabilit√© et les effets visuels.
  const dispatch = useAppDispatch();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [profitabilityData, setProfitabilityData] = useState<{
    targetsReached: number;
    totalClients: number;
    totalPointsEarned: number;
    lastChecked: string | null;
  }>({
    targetsReached: 0,
    totalClients: 0,
    totalPointsEarned: 0,
    lastChecked: null
  });
  const [showConfetti, setShowConfetti] = useState(false);

  // üü¢ Hook utilis√© DIRECTEMENT dans le composant :
  const { soundEnabled } = useAppSelector(state => state.ui || { soundEnabled: true });
  // === Fin : Initialisation des hooks ===

  // === D√©but : Fonction de d√©tection de fin de mois ===
  // Explication simple : Cette fonction v√©rifie si on est proche de la fin du mois pour te rappeler de v√©rifier la rentabilit√©, comme quand maman te rappelle qu'il est bient√¥t l'heure de ranger ta chambre.
  // Explication technique : M√©thode qui calcule si la date courante est √† 3 jours ou moins de la fin du mois calendaire, pour d√©clencher une notification visuelle incitant l'utilisateur √† v√©rifier les donn√©es avant la cl√¥ture mensuelle.
  // V√©rifier si nous sommes √† la fin du mois pour afficher un badge de notification
  const isEndOfMonth = () => {
    const today = new Date();
    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
    const daysUntilEnd = lastDayOfMonth.getDate() - today.getDate();
    return daysUntilEnd <= 3;
  };
  // === Fin : Fonction de d√©tection de fin de mois ===

  // === D√©but : Fonction de formatage de date ===
  // Explication simple : Cette fonction transforme une date technique en mots faciles √† comprendre, comme quand on √©crit "10 juin 2023" au lieu de "10/06/2023".
  // Explication technique : Fonction utilitaire qui convertit une cha√Æne de date ISO en format localis√© pour l'affichage, avec gestion des cas d'absence de date et des erreurs de parsing.
  // Formater la date de dernier contr√¥le
  const formatLastChecked = (dateStr: string | null) => {
    if (!dateStr) return 'Jamais';
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      return 'Date invalide';
    }
  };
  // === Fin : Fonction de formatage de date ===

  // === D√©but : Fonction de v√©rification de rentabilit√© ===
  // Explication simple : Cette fonction va v√©rifier sur internet combien d'argent chaque client te rapporte, compte les clients rentables, te donne des points et fait appara√Ætre des confettis si c'est une bonne nouvelle.
  // Explication technique : Fonction asynchrone qui effectue une requ√™te HTTP vers l'API de rentabilit√©, calcule les m√©triques, met √† jour l'√©tat local, dispatch des notifications et d√©clenche des effets visuels/sonores conditionnels selon les r√©sultats.
  // Remplacer cette fonction dans MonthlyProfitabilityWidget.tsx
  const checkMonthlyProfitability = async (soundEnabled: boolean) => {
    try {
      setLoading(true);
      setError(null);
      
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error("Token d'authentification manquant");
      }
      
      // Utiliser l'endpoint GET /api/profitability qui existe r√©ellement
      const result = await axios.get<ProfitabilityData[]>(`${API_URL}/api/profitability`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      // Calculer manuellement les statistiques c√¥t√© client
      const allProfitabilityData: ProfitabilityData[] = result.data || [];
      
      // Corriger le filtre avec un typage explicite
      const profitableClients = allProfitabilityData.filter(
        (client: ProfitabilityData) => client.profitabilityPercentage >= 0
      ).length;
      
      // Mettre √† jour les donn√©es d'interface
      setProfitabilityData({
        targetsReached: profitableClients,
        totalClients: allProfitabilityData.length,
        totalPointsEarned: profitableClients * 5, // 5 points par client rentable
        lastChecked: new Date().toISOString()
      });
      
      // Notification de succ√®s
      dispatch(addNotification({
        message: 'V√©rification de rentabilit√© effectu√©e avec succ√®s',
        type: 'success'
      }));
      
      // Si des clients sont rentables, d√©clencher des confettis
      if (profitableClients > 0 && soundEnabled) {
        setShowConfetti(true);
        soundService.play('success');
      }
      
    } catch (error: any) {
      console.error("Erreur d√©taill√©e lors de la v√©rification:", error);
      setError(error.response?.data?.message || error.message || "Erreur lors de la v√©rification");
    } finally {
      setLoading(false);
    }
  };
  // === Fin : Fonction de v√©rification de rentabilit√© ===

  // === D√©but : Rendu en mode compact ===
  // Explication simple : Si on choisit d'afficher une petite version du widget (comme une mini-carte), cette partie dessine une bo√Æte simple avec juste un titre et un bouton.
  // Explication technique : Bloc conditionnel de rendu qui retourne une version simplifi√©e de l'interface avec un minimum d'√©l√©ments UI lorsque le mode compact est s√©lectionn√©, optimis√© pour les espaces restreints.
  // Version compacte
  if (displayMode === 'compact') {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
        <div className="flex items-center justify-between">
          <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Rentabilit√© mensuelle
          </h3>
          {isEndOfMonth() && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
              Fin du mois
            </span>
          )}
        </div>
        <div className="mt-2">
          <button
            onClick={() => checkMonthlyProfitability(soundEnabled)}
            disabled={loading}
            className="w-full px-3 py-1 bg-primary-600 text-white text-sm rounded hover:bg-primary-700 transition-colors disabled:opacity-50"
          >
            {loading ? 'V√©rification...' : 'V√©rifier la rentabilit√©'}
          </button>
        </div>
      </div>
    );
  }
  // === Fin : Rendu en mode compact ===

  // === D√©but : Rendu en mode complet ===
  // Explication simple : C'est la grande version de notre widget qui montre beaucoup plus d'informations, avec des jolies couleurs et animations pour c√©l√©brer quand tu as de bons r√©sultats.
  // Explication technique : Rendu principal du widget en mode complet, comprenant l'effet de confettis, l'en-t√™te avec alerte de fin de mois, la grille des m√©triques cl√©s avec styling contextuel, la gestion des erreurs et le bouton d'action principal avec indicateur de chargement.
  return (
    <>
      <ConfettiEffect 
        show={showConfetti}
        duration={5000}
        particleCount={150}
        onComplete={() => setShowConfetti(false)}
      />

      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              Rentabilit√© mensuelle des clients
            </h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              V√©rifiez si vos clients atteignent leurs objectifs de rentabilit√©
            </p>
          </div>
          {isEndOfMonth() && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, repeat: Infinity, repeatType: "reverse" }}
              className="px-3 py-1 bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 rounded-full text-sm"
            >
              Fin du mois : V√©rifiez maintenant !
            </motion.div>
          )}
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="bg-primary-50 dark:bg-primary-900/30 p-4 rounded-lg">
            <div className="text-sm text-primary-600 dark:text-primary-400 mb-1">Clients rentables</div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {profitabilityData.targetsReached} / {profitabilityData.totalClients}
            </div>
          </div>
          <div className="bg-green-50 dark:bg-green-900/30 p-4 rounded-lg">
            <div className="text-sm text-green-600 dark:text-green-400 mb-1">Points gagn√©s</div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {profitabilityData.totalPointsEarned}
            </div>
          </div>
          <div className="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg">
            <div className="text-sm text-blue-600 dark:text-blue-400 mb-1">Derni√®re v√©rification</div>
            <div className="text-lg font-medium text-gray-900 dark:text-white">
              {formatLastChecked(profitabilityData.lastChecked)}
            </div>
          </div>
        </div>
        {error && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400 rounded-md">
            {error}
          </div>
        )}
        <div className="flex justify-end">
          <button
            onClick={() => checkMonthlyProfitability(soundEnabled)}
            disabled={loading}
            className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors disabled:opacity-50"
          >
            {loading ? (
              <div className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                V√©rification en cours...
              </div>
            ) : 'V√©rifier la rentabilit√© maintenant'}
          </button>
        </div>
      </div>
    </>
  );
  // === Fin : Rendu en mode complet ===
};

// === D√©but : Export du composant ===
// Explication simple : On rend notre widget disponible pour que d'autres parties de l'application puissent l'utiliser, comme quand tu partages ton jouet avec tes amis.
// Explication technique : Export par d√©faut du composant pour permettre son importation dans d'autres modules de l'application.
export default MonthlyProfitabilityWidget;
// === Fin : Export du composant ===