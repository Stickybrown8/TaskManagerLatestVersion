{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Types\n\n// État initial\nconst initialState = {\n  sidebarOpen: true,\n  darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n  currentTheme: 'default',\n  notifications: [],\n  modalOpen: false,\n  modalContent: {\n    type: null,\n    data: null\n  },\n  loading: {\n    global: false,\n    tasks: false,\n    clients: false,\n    auth: false,\n    gamification: false\n  },\n  soundEnabled: true\n};\n\n// Slice\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleSidebar: state => {\n      state.sidebarOpen = !state.sidebarOpen;\n    },\n    toggleDarkMode: state => {\n      state.darkMode = !state.darkMode;\n      // Appliquer la classe au document\n      if (state.darkMode) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    },\n    setTheme: (state, action) => {\n      state.currentTheme = action.payload;\n    },\n    addNotification: (state, action) => {\n      const newNotification = {\n        id: Date.now().toString(),\n        message: action.payload.message,\n        type: action.payload.type,\n        timestamp: Date.now(),\n        read: false\n      };\n      state.notifications.unshift(newNotification);\n\n      // Limiter à 10 notifications\n      if (state.notifications.length > 10) {\n        state.notifications.pop();\n      }\n    },\n    markNotificationAsRead: (state, action) => {\n      const notification = state.notifications.find(n => n.id === action.payload);\n      if (notification) {\n        notification.read = true;\n      }\n    },\n    clearNotifications: state => {\n      state.notifications = [];\n    },\n    openModal: (state, action) => {\n      state.modalOpen = true;\n      state.modalContent = action.payload;\n    },\n    closeModal: state => {\n      state.modalOpen = false;\n      state.modalContent = {\n        type: null,\n        data: null\n      };\n    },\n    setLoading: (state, action) => {\n      state.loading[action.payload.key] = action.payload.value;\n\n      // Mettre à jour le loading global\n      const loadingValues = Object.values(state.loading);\n      state.loading.global = loadingValues.some(value => value === true);\n    },\n    toggleSound: state => {\n      state.soundEnabled = !state.soundEnabled;\n    }\n  }\n});\n\n// Actions\nexport const {\n  toggleSidebar,\n  toggleDarkMode,\n  setTheme,\n  addNotification,\n  markNotificationAsRead,\n  clearNotifications,\n  openModal,\n  closeModal,\n  setLoading,\n  toggleSound\n} = uiSlice.actions;\n\n// Reducer\nexport default uiSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","sidebarOpen","darkMode","window","matchMedia","matches","currentTheme","notifications","modalOpen","modalContent","type","data","loading","global","tasks","clients","auth","gamification","soundEnabled","uiSlice","name","reducers","toggleSidebar","state","toggleDarkMode","document","documentElement","classList","add","remove","setTheme","action","payload","addNotification","newNotification","id","Date","now","toString","message","timestamp","read","unshift","length","pop","markNotificationAsRead","notification","find","n","clearNotifications","openModal","closeModal","setLoading","key","value","loadingValues","Object","values","some","toggleSound","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/uiSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Types\ninterface UIState {\n  sidebarOpen: boolean;\n  darkMode: boolean;\n  currentTheme: string;\n  notifications: Notification[];\n  modalOpen: boolean;\n  modalContent: {\n    type: 'task' | 'client' | 'profile' | 'badge' | null;\n    data: any;\n  };\n  loading: {\n    global: boolean;\n    tasks: boolean;\n    clients: boolean;\n    auth: boolean;\n    gamification: boolean;\n  };\n  soundEnabled: boolean;\n}\n\ninterface Notification {\n  id: string;\n  message: string;\n  type: 'success' | 'error' | 'info' | 'warning';\n  timestamp: number;\n  read: boolean;\n}\n\n// État initial\nconst initialState: UIState = {\n  sidebarOpen: true,\n  darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n  currentTheme: 'default',\n  notifications: [],\n  modalOpen: false,\n  modalContent: {\n    type: null,\n    data: null,\n  },\n  loading: {\n    global: false,\n    tasks: false,\n    clients: false,\n    auth: false,\n    gamification: false,\n  },\n  soundEnabled: true,\n};\n\n// Slice\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleSidebar: (state) => {\n      state.sidebarOpen = !state.sidebarOpen;\n    },\n    toggleDarkMode: (state) => {\n      state.darkMode = !state.darkMode;\n      // Appliquer la classe au document\n      if (state.darkMode) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    },\n    setTheme: (state, action: PayloadAction<string>) => {\n      state.currentTheme = action.payload;\n    },\n    addNotification: (state, action: PayloadAction<Omit<Notification, 'id' | 'timestamp' | 'read'>>) => {\n      const newNotification: Notification = {\n        id: Date.now().toString(),\n        message: action.payload.message,\n        type: action.payload.type,\n        timestamp: Date.now(),\n        read: false,\n      };\n      state.notifications.unshift(newNotification);\n      \n      // Limiter à 10 notifications\n      if (state.notifications.length > 10) {\n        state.notifications.pop();\n      }\n    },\n    markNotificationAsRead: (state, action: PayloadAction<string>) => {\n      const notification = state.notifications.find(n => n.id === action.payload);\n      if (notification) {\n        notification.read = true;\n      }\n    },\n    clearNotifications: (state) => {\n      state.notifications = [];\n    },\n    openModal: (state, action: PayloadAction<UIState['modalContent']>) => {\n      state.modalOpen = true;\n      state.modalContent = action.payload;\n    },\n    closeModal: (state) => {\n      state.modalOpen = false;\n      state.modalContent = {\n        type: null,\n        data: null,\n      };\n    },\n    setLoading: (state, action: PayloadAction<{ key: keyof UIState['loading']; value: boolean }>) => {\n      state.loading[action.payload.key] = action.payload.value;\n      \n      // Mettre à jour le loading global\n      const loadingValues = Object.values(state.loading);\n      state.loading.global = loadingValues.some(value => value === true);\n    },\n    toggleSound: (state) => {\n      state.soundEnabled = !state.soundEnabled;\n    },\n  },\n});\n\n// Actions\nexport const {\n  toggleSidebar,\n  toggleDarkMode,\n  setTheme,\n  addNotification,\n  markNotificationAsRead,\n  clearNotifications,\n  openModal,\n  closeModal,\n  setLoading,\n  toggleSound,\n} = uiSlice.actions;\n\n// Reducer\nexport default uiSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}