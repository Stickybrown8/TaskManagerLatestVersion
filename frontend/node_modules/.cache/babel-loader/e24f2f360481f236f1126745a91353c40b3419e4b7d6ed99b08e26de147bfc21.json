{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';// Types\n// État initial\nconst initialState={clients:[],currentClient:null,loading:false,error:null};// Slice\nconst clientsSlice=createSlice({name:'clients',initialState,reducers:{fetchClientsStart:state=>{state.loading=true;state.error=null;},fetchClientsSuccess:(state,action)=>{state.clients=action.payload;state.loading=false;},fetchClientsFailure:(state,action)=>{state.loading=false;state.error=action.payload;},fetchClientStart:state=>{state.loading=true;state.error=null;},fetchClientSuccess:(state,action)=>{state.currentClient=action.payload;state.loading=false;},fetchClientFailure:(state,action)=>{state.loading=false;state.error=action.payload;},createClientStart:state=>{state.loading=true;state.error=null;},createClientSuccess:(state,action)=>{state.clients.push(action.payload);state.loading=false;},createClientFailure:(state,action)=>{state.loading=false;state.error=action.payload;},updateClientStart:state=>{state.loading=true;state.error=null;},updateClientSuccess:(state,action)=>{const index=state.clients.findIndex(client=>client._id===action.payload._id);if(index!==-1){state.clients[index]=action.payload;}if(state.currentClient&&state.currentClient._id===action.payload._id){state.currentClient=action.payload;}state.loading=false;},updateClientFailure:(state,action)=>{state.loading=false;state.error=action.payload;},deleteClientStart:state=>{state.loading=true;state.error=null;},deleteClientSuccess:(state,action)=>{state.clients=state.clients.filter(client=>client._id!==action.payload);if(state.currentClient&&state.currentClient._id===action.payload){state.currentClient=null;}state.loading=false;},deleteClientFailure:(state,action)=>{state.loading=false;state.error=action.payload;},clearCurrentClient:state=>{state.currentClient=null;}}});// Actions\nexport const{fetchClientsStart,fetchClientsSuccess,fetchClientsFailure,fetchClientStart,fetchClientSuccess,fetchClientFailure,createClientStart,createClientSuccess,createClientFailure,updateClientStart,updateClientSuccess,updateClientFailure,deleteClientStart,deleteClientSuccess,deleteClientFailure,clearCurrentClient}=clientsSlice.actions;// Reducer\nexport default clientsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","clients","currentClient","loading","error","clientsSlice","name","reducers","fetchClientsStart","state","fetchClientsSuccess","action","payload","fetchClientsFailure","fetchClientStart","fetchClientSuccess","fetchClientFailure","createClientStart","createClientSuccess","push","createClientFailure","updateClientStart","updateClientSuccess","index","findIndex","client","_id","updateClientFailure","deleteClientStart","deleteClientSuccess","filter","deleteClientFailure","clearCurrentClient","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/clientsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Types\ninterface Client {\n  _id: string;\n  name: string;\n  description: string;\n  status: 'actif' | 'inactif' | 'archivé';\n  contacts: Contact[];\n  notes: string;\n  tags: string[];\n  metrics: {\n    tasksCompleted: number;\n    tasksInProgress: number;\n    tasksPending: number;\n    lastActivity: string;\n  };\n}\n\ninterface Contact {\n  name: string;\n  role: string;\n  email: string;\n  phone: string;\n  isMain: boolean;\n}\n\ninterface ClientsState {\n  clients: Client[];\n  currentClient: Client | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// État initial\nconst initialState: ClientsState = {\n  clients: [],\n  currentClient: null,\n  loading: false,\n  error: null,\n};\n\n// Slice\nconst clientsSlice = createSlice({\n  name: 'clients',\n  initialState,\n  reducers: {\n    fetchClientsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchClientsSuccess: (state, action: PayloadAction<Client[]>) => {\n      state.clients = action.payload;\n      state.loading = false;\n    },\n    fetchClientsFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchClientSuccess: (state, action: PayloadAction<Client>) => {\n      state.currentClient = action.payload;\n      state.loading = false;\n    },\n    fetchClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    createClientSuccess: (state, action: PayloadAction<Client>) => {\n      state.clients.push(action.payload);\n      state.loading = false;\n    },\n    createClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateClientSuccess: (state, action: PayloadAction<Client>) => {\n      const index = state.clients.findIndex(client => client._id === action.payload._id);\n      if (index !== -1) {\n        state.clients[index] = action.payload;\n      }\n      if (state.currentClient && state.currentClient._id === action.payload._id) {\n        state.currentClient = action.payload;\n      }\n      state.loading = false;\n    },\n    updateClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteClientSuccess: (state, action: PayloadAction<string>) => {\n      state.clients = state.clients.filter(client => client._id !== action.payload);\n      if (state.currentClient && state.currentClient._id === action.payload) {\n        state.currentClient = null;\n      }\n      state.loading = false;\n    },\n    deleteClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    clearCurrentClient: (state) => {\n      state.currentClient = null;\n    },\n  },\n});\n\n// Actions\nexport const {\n  fetchClientsStart,\n  fetchClientsSuccess,\n  fetchClientsFailure,\n  fetchClientStart,\n  fetchClientSuccess,\n  fetchClientFailure,\n  createClientStart,\n  createClientSuccess,\n  createClientFailure,\n  updateClientStart,\n  updateClientSuccess,\n  updateClientFailure,\n  deleteClientStart,\n  deleteClientSuccess,\n  deleteClientFailure,\n  clearCurrentClient,\n} = clientsSlice.actions;\n\n// Reducer\nexport default clientsSlice.reducer;\n"],"mappings":"AAAA,OAASA,WAAW,KAAuB,kBAAkB,CAE7D;AAgCA;AACA,KAAM,CAAAC,YAA0B,CAAG,CACjCC,OAAO,CAAE,EAAE,CACXC,aAAa,CAAE,IAAI,CACnBC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAGN,WAAW,CAAC,CAC/BO,IAAI,CAAE,SAAS,CACfN,YAAY,CACZO,QAAQ,CAAE,CACRC,iBAAiB,CAAGC,KAAK,EAAK,CAC5BA,KAAK,CAACN,OAAO,CAAG,IAAI,CACpBM,KAAK,CAACL,KAAK,CAAG,IAAI,CACpB,CAAC,CACDM,mBAAmB,CAAEA,CAACD,KAAK,CAAEE,MAA+B,GAAK,CAC/DF,KAAK,CAACR,OAAO,CAAGU,MAAM,CAACC,OAAO,CAC9BH,KAAK,CAACN,OAAO,CAAG,KAAK,CACvB,CAAC,CACDU,mBAAmB,CAAEA,CAACJ,KAAK,CAAEE,MAA6B,GAAK,CAC7DF,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBM,KAAK,CAACL,KAAK,CAAGO,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDE,gBAAgB,CAAGL,KAAK,EAAK,CAC3BA,KAAK,CAACN,OAAO,CAAG,IAAI,CACpBM,KAAK,CAACL,KAAK,CAAG,IAAI,CACpB,CAAC,CACDW,kBAAkB,CAAEA,CAACN,KAAK,CAAEE,MAA6B,GAAK,CAC5DF,KAAK,CAACP,aAAa,CAAGS,MAAM,CAACC,OAAO,CACpCH,KAAK,CAACN,OAAO,CAAG,KAAK,CACvB,CAAC,CACDa,kBAAkB,CAAEA,CAACP,KAAK,CAAEE,MAA6B,GAAK,CAC5DF,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBM,KAAK,CAACL,KAAK,CAAGO,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDK,iBAAiB,CAAGR,KAAK,EAAK,CAC5BA,KAAK,CAACN,OAAO,CAAG,IAAI,CACpBM,KAAK,CAACL,KAAK,CAAG,IAAI,CACpB,CAAC,CACDc,mBAAmB,CAAEA,CAACT,KAAK,CAAEE,MAA6B,GAAK,CAC7DF,KAAK,CAACR,OAAO,CAACkB,IAAI,CAACR,MAAM,CAACC,OAAO,CAAC,CAClCH,KAAK,CAACN,OAAO,CAAG,KAAK,CACvB,CAAC,CACDiB,mBAAmB,CAAEA,CAACX,KAAK,CAAEE,MAA6B,GAAK,CAC7DF,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBM,KAAK,CAACL,KAAK,CAAGO,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDS,iBAAiB,CAAGZ,KAAK,EAAK,CAC5BA,KAAK,CAACN,OAAO,CAAG,IAAI,CACpBM,KAAK,CAACL,KAAK,CAAG,IAAI,CACpB,CAAC,CACDkB,mBAAmB,CAAEA,CAACb,KAAK,CAAEE,MAA6B,GAAK,CAC7D,KAAM,CAAAY,KAAK,CAAGd,KAAK,CAACR,OAAO,CAACuB,SAAS,CAACC,MAAM,EAAIA,MAAM,CAACC,GAAG,GAAKf,MAAM,CAACC,OAAO,CAACc,GAAG,CAAC,CAClF,GAAIH,KAAK,GAAK,CAAC,CAAC,CAAE,CAChBd,KAAK,CAACR,OAAO,CAACsB,KAAK,CAAC,CAAGZ,MAAM,CAACC,OAAO,CACvC,CACA,GAAIH,KAAK,CAACP,aAAa,EAAIO,KAAK,CAACP,aAAa,CAACwB,GAAG,GAAKf,MAAM,CAACC,OAAO,CAACc,GAAG,CAAE,CACzEjB,KAAK,CAACP,aAAa,CAAGS,MAAM,CAACC,OAAO,CACtC,CACAH,KAAK,CAACN,OAAO,CAAG,KAAK,CACvB,CAAC,CACDwB,mBAAmB,CAAEA,CAAClB,KAAK,CAAEE,MAA6B,GAAK,CAC7DF,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBM,KAAK,CAACL,KAAK,CAAGO,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDgB,iBAAiB,CAAGnB,KAAK,EAAK,CAC5BA,KAAK,CAACN,OAAO,CAAG,IAAI,CACpBM,KAAK,CAACL,KAAK,CAAG,IAAI,CACpB,CAAC,CACDyB,mBAAmB,CAAEA,CAACpB,KAAK,CAAEE,MAA6B,GAAK,CAC7DF,KAAK,CAACR,OAAO,CAAGQ,KAAK,CAACR,OAAO,CAAC6B,MAAM,CAACL,MAAM,EAAIA,MAAM,CAACC,GAAG,GAAKf,MAAM,CAACC,OAAO,CAAC,CAC7E,GAAIH,KAAK,CAACP,aAAa,EAAIO,KAAK,CAACP,aAAa,CAACwB,GAAG,GAAKf,MAAM,CAACC,OAAO,CAAE,CACrEH,KAAK,CAACP,aAAa,CAAG,IAAI,CAC5B,CACAO,KAAK,CAACN,OAAO,CAAG,KAAK,CACvB,CAAC,CACD4B,mBAAmB,CAAEA,CAACtB,KAAK,CAAEE,MAA6B,GAAK,CAC7DF,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBM,KAAK,CAACL,KAAK,CAAGO,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDoB,kBAAkB,CAAGvB,KAAK,EAAK,CAC7BA,KAAK,CAACP,aAAa,CAAG,IAAI,CAC5B,CACF,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CACXM,iBAAiB,CACjBE,mBAAmB,CACnBG,mBAAmB,CACnBC,gBAAgB,CAChBC,kBAAkB,CAClBC,kBAAkB,CAClBC,iBAAiB,CACjBC,mBAAmB,CACnBE,mBAAmB,CACnBC,iBAAiB,CACjBC,mBAAmB,CACnBK,mBAAmB,CACnBC,iBAAiB,CACjBC,mBAAmB,CACnBE,mBAAmB,CACnBC,kBACF,CAAC,CAAG3B,YAAY,CAAC4B,OAAO,CAExB;AACA,cAAe,CAAA5B,YAAY,CAAC6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}