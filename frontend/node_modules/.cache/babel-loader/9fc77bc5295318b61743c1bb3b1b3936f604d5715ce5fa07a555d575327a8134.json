{"ast":null,"code":"import axios from 'axios';\nimport { store } from '../store';\nimport { logout } from '../store/slices/authSlice';\n\n// Créer une instance axios avec la configuration de base\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token d'authentification à chaque requête\napi.interceptors.request.use(config => {\n  const state = store.getState();\n  const token = state.auth.token;\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Intercepteur pour gérer les erreurs d'authentification\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    store.dispatch(logout());\n  }\n  return Promise.reject(error);\n});\n\n// Services pour les différentes entités\nexport const authService = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  register: async (name, email, password) => {\n    const response = await api.post('/auth/register', {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  }\n};\nexport const tasksService = {\n  getTasks: async () => {\n    const response = await api.get('/tasks');\n    return response.data;\n  },\n  getTaskById: async id => {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data;\n  },\n  createTask: async taskData => {\n    const response = await api.post('/tasks', taskData);\n    return response.data;\n  },\n  updateTask: async (id, taskData) => {\n    const response = await api.put(`/tasks/${id}`, taskData);\n    return response.data;\n  },\n  deleteTask: async id => {\n    const response = await api.delete(`/tasks/${id}`);\n    return response.data;\n  }\n};\nexport const clientsService = {\n  getClients: async () => {\n    const response = await api.get('/clients');\n    return response.data;\n  },\n  getClientById: async id => {\n    const response = await api.get(`/clients/${id}`);\n    return response.data;\n  },\n  createClient: async clientData => {\n    const response = await api.post('/clients', clientData);\n    return response.data;\n  },\n  updateClient: async (id, clientData) => {\n    const response = await api.put(`/clients/${id}`, clientData);\n    return response.data;\n  },\n  deleteClient: async id => {\n    const response = await api.delete(`/clients/${id}`);\n    return response.data;\n  }\n};\nexport const gamificationService = {\n  getProfile: async () => {\n    const response = await api.get('/gamification/profile');\n    return response.data;\n  },\n  getLevels: async () => {\n    const response = await api.get('/gamification/levels');\n    return response.data;\n  },\n  getActivities: async (page, limit) => {\n    const response = await api.get(`/gamification/activities?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n  updateStreak: async () => {\n    const response = await api.post('/gamification/streak');\n    return response.data;\n  },\n  // Ajout de méthodes manquantes\n  addActionPoints: async (points, type, description) => {\n    const response = await api.post('/gamification/action-points', {\n      points,\n      type,\n      description\n    });\n    return response.data;\n  }\n};\nexport const badgesService = {\n  getUserBadges: async () => {\n    const response = await api.get('/badges/user');\n    return response.data;\n  },\n  getAllBadges: async () => {\n    const response = await api.get('/badges');\n    return response.data;\n  }\n};\n\n// Service Timer complet avec toutes les méthodes nécessaires\nexport const timerService = {\n  startTimer: async timerData => {\n    const response = await api.post('/timer/start', timerData);\n    return response.data;\n  },\n  stopTimer: async (id, duration) => {\n    const response = await api.post(`/timer/stop/${id}`, {\n      duration\n    });\n    return response.data;\n  },\n  getTimerHistory: async taskId => {\n    const response = await api.get(`/timer/history/${taskId}`);\n    return response.data;\n  },\n  // Méthodes manquantes\n  getAllTimers: async () => {\n    const response = await api.get('/timer/all');\n    return response.data;\n  },\n  getRunningTimer: async () => {\n    const response = await api.get('/timer/running');\n    return response.data;\n  },\n  getTimerById: async id => {\n    const response = await api.get(`/timer/${id}`);\n    return response.data;\n  },\n  pauseTimer: async id => {\n    const response = await api.post(`/timer/pause/${id}`);\n    return response.data;\n  },\n  resumeTimer: async id => {\n    const response = await api.post(`/timer/resume/${id}`);\n    return response.data;\n  },\n  deleteTimer: async id => {\n    const response = await api.delete(`/timer/${id}`);\n    return response.data;\n  },\n  getClientTimers: async clientId => {\n    const response = await api.get(`/timer/client/${clientId}`);\n    return response.data;\n  },\n  getTaskTimers: async taskId => {\n    const response = await api.get(`/timer/task/${taskId}`);\n    return response.data;\n  }\n};\n\n// Ajout des services manquants\nexport const taskImpactService = {\n  getHighImpactTasks: async () => {\n    const response = await api.get('/taskImpact/highImpact');\n    return response.data;\n  },\n  updateTaskImpact: async (taskId, isHighImpact, impactScore) => {\n    const response = await api.put(`/taskImpact/${taskId}`, {\n      isHighImpact,\n      impactScore\n    });\n    return response.data;\n  },\n  analyzeTasksImpact: async () => {\n    const response = await api.post('/taskImpact/analyze');\n    return response.data;\n  },\n  applyImpactAnalysis: async updatedTasks => {\n    const response = await api.post('/taskImpact/apply', {\n      tasks: updatedTasks\n    });\n    return response.data;\n  }\n};\nexport const profitabilityService = {\n  getAllProfitability: async () => {\n    const response = await api.get('/profitability/all');\n    return response.data;\n  },\n  getClientProfitability: async clientId => {\n    const response = await api.get(`/profitability/client/${clientId}`);\n    return response.data;\n  },\n  updateHourlyRate: async (clientId, hourlyRate) => {\n    const response = await api.put(`/profitability/hourlyRate/${clientId}`, {\n      hourlyRate\n    });\n    return response.data;\n  },\n  updateSpentHours: async (clientId, spentHours, incrementOnly) => {\n    const response = await api.put(`/profitability/spentHours/${clientId}`, {\n      spentHours,\n      incrementOnly\n    });\n    return response.data;\n  },\n  updateTargetHours: async (clientId, targetHours) => {\n    const response = await api.put(`/profitability/targetHours/${clientId}`, {\n      targetHours\n    });\n    return response.data;\n  },\n  getGlobalProfitabilitySummary: async () => {\n    const response = await api.get('/profitability/summary');\n    return response.data;\n  },\n  getClientTasks: async clientId => {\n    const response = await api.get(`/profitability/tasks/${clientId}`);\n    return response.data;\n  }\n};\nexport const objectivesService = {\n  getAll: async () => {\n    const response = await api.get('/objectives');\n    return response.data;\n  },\n  getById: async id => {\n    const response = await api.get(`/objectives/${id}`);\n    return response.data;\n  },\n  getByClient: async clientId => {\n    const response = await api.get(`/objectives/client/${clientId}`);\n    return response.data;\n  },\n  getHighImpact: async () => {\n    const response = await api.get('/objectives/highImpact');\n    return response.data;\n  },\n  create: async objectiveData => {\n    const response = await api.post('/objectives', objectiveData);\n    return response.data;\n  },\n  update: async (id, objectiveData) => {\n    const response = await api.put(`/objectives/${id}`, objectiveData);\n    return response.data;\n  },\n  updateProgress: async (id, currentValue) => {\n    const response = await api.put(`/objectives/${id}/progress`, {\n      currentValue\n    });\n    return response.data;\n  },\n  delete: async id => {\n    const response = await api.delete(`/objectives/${id}`);\n    return response.data;\n  },\n  linkTask: async (objectiveId, taskId) => {\n    const response = await api.post(`/objectives/${objectiveId}/tasks/${taskId}`);\n    return response.data;\n  },\n  unlinkTask: async (objectiveId, taskId) => {\n    const response = await api.delete(`/objectives/${objectiveId}/tasks/${taskId}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","store","logout","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","state","getState","token","auth","Authorization","error","Promise","reject","response","status","dispatch","authService","login","email","password","post","data","register","name","getCurrentUser","get","tasksService","getTasks","getTaskById","id","createTask","taskData","updateTask","put","deleteTask","delete","clientsService","getClients","getClientById","createClient","clientData","updateClient","deleteClient","gamificationService","getProfile","getLevels","getActivities","page","limit","updateStreak","addActionPoints","points","type","description","badgesService","getUserBadges","getAllBadges","timerService","startTimer","timerData","stopTimer","duration","getTimerHistory","taskId","getAllTimers","getRunningTimer","getTimerById","pauseTimer","resumeTimer","deleteTimer","getClientTimers","clientId","getTaskTimers","taskImpactService","getHighImpactTasks","updateTaskImpact","isHighImpact","impactScore","analyzeTasksImpact","applyImpactAnalysis","updatedTasks","tasks","profitabilityService","getAllProfitability","getClientProfitability","updateHourlyRate","hourlyRate","updateSpentHours","spentHours","incrementOnly","updateTargetHours","targetHours","getGlobalProfitabilitySummary","getClientTasks","objectivesService","getAll","getById","getByClient","getHighImpact","objectiveData","update","updateProgress","currentValue","linkTask","objectiveId","unlinkTask"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { store } from '../store';\nimport { logout } from '../store/slices/authSlice';\n\n// Créer une instance axios avec la configuration de base\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour ajouter le token d'authentification à chaque requête\napi.interceptors.request.use(\n  (config) => {\n    const state = store.getState();\n    const token = state.auth.token;\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Intercepteur pour gérer les erreurs d'authentification\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      store.dispatch(logout());\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Services pour les différentes entités\nexport const authService = {\n  login: async (email: string, password: string) => {\n    const response = await api.post('/auth/login', { email, password });\n    return response.data;\n  },\n  register: async (name: string, email: string, password: string) => {\n    const response = await api.post('/auth/register', { name, email, password });\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n};\n\nexport const tasksService = {\n  getTasks: async () => {\n    const response = await api.get('/tasks');\n    return response.data;\n  },\n  getTaskById: async (id: string) => {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data;\n  },\n  createTask: async (taskData: any) => {\n    const response = await api.post('/tasks', taskData);\n    return response.data;\n  },\n  updateTask: async (id: string, taskData: any) => {\n    const response = await api.put(`/tasks/${id}`, taskData);\n    return response.data;\n  },\n  deleteTask: async (id: string) => {\n    const response = await api.delete(`/tasks/${id}`);\n    return response.data;\n  },\n};\n\nexport const clientsService = {\n  getClients: async () => {\n    const response = await api.get('/clients');\n    return response.data;\n  },\n  getClientById: async (id: string) => {\n    const response = await api.get(`/clients/${id}`);\n    return response.data;\n  },\n  createClient: async (clientData: any) => {\n    const response = await api.post('/clients', clientData);\n    return response.data;\n  },\n  updateClient: async (id: string, clientData: any) => {\n    const response = await api.put(`/clients/${id}`, clientData);\n    return response.data;\n  },\n  deleteClient: async (id: string) => {\n    const response = await api.delete(`/clients/${id}`);\n    return response.data;\n  },\n};\n\nexport const gamificationService = {\n  getProfile: async () => {\n    const response = await api.get('/gamification/profile');\n    return response.data;\n  },\n  getLevels: async () => {\n    const response = await api.get('/gamification/levels');\n    return response.data;\n  },\n  getActivities: async (page: number, limit: number) => {\n    const response = await api.get(`/gamification/activities?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n  updateStreak: async () => {\n    const response = await api.post('/gamification/streak');\n    return response.data;\n  },\n  // Ajout de méthodes manquantes\n  addActionPoints: async (points: number, type: string, description: string) => {\n    const response = await api.post('/gamification/action-points', { points, type, description });\n    return response.data;\n  }\n};\n\nexport const badgesService = {\n  getUserBadges: async () => {\n    const response = await api.get('/badges/user');\n    return response.data;\n  },\n  getAllBadges: async () => {\n    const response = await api.get('/badges');\n    return response.data;\n  },\n};\n\n// Service Timer complet avec toutes les méthodes nécessaires\nexport const timerService = {\n  startTimer: async (timerData: any) => {\n    const response = await api.post('/timer/start', timerData);\n    return response.data;\n  },\n  stopTimer: async (id: string, duration?: number) => {\n    const response = await api.post(`/timer/stop/${id}`, { duration });\n    return response.data;\n  },\n  getTimerHistory: async (taskId: string) => {\n    const response = await api.get(`/timer/history/${taskId}`);\n    return response.data;\n  },\n  // Méthodes manquantes\n  getAllTimers: async () => {\n    const response = await api.get('/timer/all');\n    return response.data;\n  },\n  getRunningTimer: async () => {\n    const response = await api.get('/timer/running');\n    return response.data;\n  },\n  getTimerById: async (id: string) => {\n    const response = await api.get(`/timer/${id}`);\n    return response.data;\n  },\n  pauseTimer: async (id: string) => {\n    const response = await api.post(`/timer/pause/${id}`);\n    return response.data;\n  },\n  resumeTimer: async (id: string) => {\n    const response = await api.post(`/timer/resume/${id}`);\n    return response.data;\n  },\n  deleteTimer: async (id: string) => {\n    const response = await api.delete(`/timer/${id}`);\n    return response.data;\n  },\n  getClientTimers: async (clientId: string) => {\n    const response = await api.get(`/timer/client/${clientId}`);\n    return response.data;\n  },\n  getTaskTimers: async (taskId: string) => {\n    const response = await api.get(`/timer/task/${taskId}`);\n    return response.data;\n  }\n};\n\n// Ajout des services manquants\nexport const taskImpactService = {\n  getHighImpactTasks: async () => {\n    const response = await api.get('/taskImpact/highImpact');\n    return response.data;\n  },\n  updateTaskImpact: async (taskId: string, isHighImpact: boolean, impactScore: number) => {\n    const response = await api.put(`/taskImpact/${taskId}`, { isHighImpact, impactScore });\n    return response.data;\n  },\n  analyzeTasksImpact: async () => {\n    const response = await api.post('/taskImpact/analyze');\n    return response.data;\n  },\n  applyImpactAnalysis: async (updatedTasks: any[]) => {\n    const response = await api.post('/taskImpact/apply', { tasks: updatedTasks });\n    return response.data;\n  },\n};\n\nexport const profitabilityService = {\n  getAllProfitability: async () => {\n    const response = await api.get('/profitability/all');\n    return response.data;\n  },\n  getClientProfitability: async (clientId: string) => {\n    const response = await api.get(`/profitability/client/${clientId}`);\n    return response.data;\n  },\n  updateHourlyRate: async (clientId: string, hourlyRate: number) => {\n    const response = await api.put(`/profitability/hourlyRate/${clientId}`, { hourlyRate });\n    return response.data;\n  },\n  updateSpentHours: async (clientId: string, spentHours: number, incrementOnly?: boolean) => {\n    const response = await api.put(`/profitability/spentHours/${clientId}`, { spentHours, incrementOnly });\n    return response.data;\n  },\n  updateTargetHours: async (clientId: string, targetHours: number) => {\n    const response = await api.put(`/profitability/targetHours/${clientId}`, { targetHours });\n    return response.data;\n  },\n  getGlobalProfitabilitySummary: async () => {\n    const response = await api.get('/profitability/summary');\n    return response.data;\n  },\n  getClientTasks: async (clientId: string) => {\n    const response = await api.get(`/profitability/tasks/${clientId}`);\n    return response.data;\n  },\n};\n\nexport const objectivesService = {\n  getAll: async () => {\n    const response = await api.get('/objectives');\n    return response.data;\n  },\n  getById: async (id: string) => {\n    const response = await api.get(`/objectives/${id}`);\n    return response.data;\n  },\n  getByClient: async (clientId: string) => {\n    const response = await api.get(`/objectives/client/${clientId}`);\n    return response.data;\n  },\n  getHighImpact: async () => {\n    const response = await api.get('/objectives/highImpact');\n    return response.data;\n  },\n  create: async (objectiveData: any) => {\n    const response = await api.post('/objectives', objectiveData);\n    return response.data;\n  },\n  update: async (id: string, objectiveData: any) => {\n    const response = await api.put(`/objectives/${id}`, objectiveData);\n    return response.data;\n  },\n  updateProgress: async (id: string, currentValue: number) => {\n    const response = await api.put(`/objectives/${id}/progress`, { currentValue });\n    return response.data;\n  },\n  delete: async (id: string) => {\n    const response = await api.delete(`/objectives/${id}`);\n    return response.data;\n  },\n  linkTask: async (objectiveId: string, taskId: string) => {\n    const response = await api.post(`/objectives/${objectiveId}/tasks/${taskId}`);\n    return response.data;\n  },\n  unlinkTask: async (objectiveId: string, taskId: string) => {\n    const response = await api.delete(`/objectives/${objectiveId}/tasks/${taskId}`);\n    return response.data;\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}