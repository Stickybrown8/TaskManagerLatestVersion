{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Types\n\n// État initial\nconst initialState = {\n  tasks: [],\n  currentTask: null,\n  filteredTasks: [],\n  filters: {},\n  loading: false,\n  error: null\n};\n\n// Slice\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    fetchTasksStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchTasksSuccess: (state, action) => {\n      state.tasks = action.payload;\n      state.filteredTasks = applyFilters(action.payload, state.filters);\n      state.loading = false;\n    },\n    fetchTasksFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchTaskStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchTaskSuccess: (state, action) => {\n      state.currentTask = action.payload;\n      state.loading = false;\n    },\n    fetchTaskFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createTaskStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    createTaskSuccess: (state, action) => {\n      state.tasks.push(action.payload);\n      state.filteredTasks = applyFilters(state.tasks, state.filters);\n      state.loading = false;\n    },\n    createTaskFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateTaskStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateTaskSuccess: (state, action) => {\n      const index = state.tasks.findIndex(task => task._id === action.payload._id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n      if (state.currentTask && state.currentTask._id === action.payload._id) {\n        state.currentTask = action.payload;\n      }\n      state.filteredTasks = applyFilters(state.tasks, state.filters);\n      state.loading = false;\n    },\n    updateTaskFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteTaskStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteTaskSuccess: (state, action) => {\n      state.tasks = state.tasks.filter(task => task._id !== action.payload);\n      if (state.currentTask && state.currentTask._id === action.payload) {\n        state.currentTask = null;\n      }\n      state.filteredTasks = applyFilters(state.tasks, state.filters);\n      state.loading = false;\n    },\n    deleteTaskFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setTaskFilters: (state, action) => {\n      state.filters = action.payload;\n      state.filteredTasks = applyFilters(state.tasks, action.payload);\n    },\n    clearTaskFilters: state => {\n      state.filters = {};\n      state.filteredTasks = [...state.tasks];\n    },\n    clearCurrentTask: state => {\n      state.currentTask = null;\n    }\n  }\n});\n\n// Fonction utilitaire pour appliquer les filtres\nconst applyFilters = (tasks, filters) => {\n  return tasks.filter(task => {\n    // Filtre par statut\n    if (filters.status && task.status !== filters.status) {\n      return false;\n    }\n\n    // Filtre par client\n    if (filters.clientId && task.clientId !== filters.clientId) {\n      return false;\n    }\n\n    // Filtre par catégorie\n    if (filters.category && task.category !== filters.category) {\n      return false;\n    }\n\n    // Filtre par priorité\n    if (filters.priority && task.priority !== filters.priority) {\n      return false;\n    }\n\n    // Filtre par date d'échéance\n    if (filters.dueDate) {\n      const dueDate = new Date(task.dueDate);\n      const filterDate = new Date(filters.dueDate);\n      if (dueDate.getFullYear() !== filterDate.getFullYear() || dueDate.getMonth() !== filterDate.getMonth() || dueDate.getDate() !== filterDate.getDate()) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n\n// Actions\nexport const {\n  fetchTasksStart,\n  fetchTasksSuccess,\n  fetchTasksFailure,\n  fetchTaskStart,\n  fetchTaskSuccess,\n  fetchTaskFailure,\n  createTaskStart,\n  createTaskSuccess,\n  createTaskFailure,\n  updateTaskStart,\n  updateTaskSuccess,\n  updateTaskFailure,\n  deleteTaskStart,\n  deleteTaskSuccess,\n  deleteTaskFailure,\n  setTaskFilters,\n  clearTaskFilters,\n  clearCurrentTask\n} = tasksSlice.actions;\n\n// Reducer\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","currentTask","filteredTasks","filters","loading","error","tasksSlice","name","reducers","fetchTasksStart","state","fetchTasksSuccess","action","payload","applyFilters","fetchTasksFailure","fetchTaskStart","fetchTaskSuccess","fetchTaskFailure","createTaskStart","createTaskSuccess","push","createTaskFailure","updateTaskStart","updateTaskSuccess","index","findIndex","task","_id","updateTaskFailure","deleteTaskStart","deleteTaskSuccess","filter","deleteTaskFailure","setTaskFilters","clearTaskFilters","clearCurrentTask","status","clientId","category","priority","dueDate","Date","filterDate","getFullYear","getMonth","getDate","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/tasksSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Types\ninterface Task {\n  _id: string;\n  clientId: string;\n  title: string;\n  description: string;\n  category: 'campagne' | 'landing' | 'rapport' | 'email' | 'reunion' | 'tracking' | 'cro';\n  priority: 'basse' | 'moyenne' | 'haute' | 'urgente';\n  status: 'à faire' | 'en cours' | 'terminée';\n  createdAt: string;\n  dueDate: string;\n  completedAt?: string;\n  actionPoints: number;\n  recurring?: {\n    isRecurring: boolean;\n    frequency?: 'quotidien' | 'hebdomadaire' | 'mensuel';\n    interval?: number;\n    endDate?: string;\n  };\n  reminders?: {\n    time: string;\n    sent: boolean;\n  }[];\n  subtasks?: {\n    title: string;\n    completed: boolean;\n    completedAt?: string;\n  }[];\n  attachments?: {\n    name: string;\n    url: string;\n    type: string;\n    size: number;\n  }[];\n  history?: {\n    action: string;\n    timestamp: string;\n    details: any;\n  }[];\n}\n\ninterface TasksState {\n  tasks: Task[];\n  currentTask: Task | null;\n  filteredTasks: Task[];\n  filters: {\n    status?: string;\n    clientId?: string;\n    category?: string;\n    priority?: string;\n    dueDate?: string;\n  };\n  loading: boolean;\n  error: string | null;\n}\n\n// État initial\nconst initialState: TasksState = {\n  tasks: [],\n  currentTask: null,\n  filteredTasks: [],\n  filters: {},\n  loading: false,\n  error: null,\n};\n\n// Slice\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    fetchTasksStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchTasksSuccess: (state, action: PayloadAction<Task[]>) => {\n      state.tasks = action.payload;\n      state.filteredTasks = applyFilters(action.payload, state.filters);\n      state.loading = false;\n    },\n    fetchTasksFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchTaskStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchTaskSuccess: (state, action: PayloadAction<Task>) => {\n      state.currentTask = action.payload;\n      state.loading = false;\n    },\n    fetchTaskFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createTaskStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    createTaskSuccess: (state, action: PayloadAction<Task>) => {\n      state.tasks.push(action.payload);\n      state.filteredTasks = applyFilters(state.tasks, state.filters);\n      state.loading = false;\n    },\n    createTaskFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateTaskStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateTaskSuccess: (state, action: PayloadAction<Task>) => {\n      const index = state.tasks.findIndex(task => task._id === action.payload._id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n      if (state.currentTask && state.currentTask._id === action.payload._id) {\n        state.currentTask = action.payload;\n      }\n      state.filteredTasks = applyFilters(state.tasks, state.filters);\n      state.loading = false;\n    },\n    updateTaskFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteTaskStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteTaskSuccess: (state, action: PayloadAction<string>) => {\n      state.tasks = state.tasks.filter(task => task._id !== action.payload);\n      if (state.currentTask && state.currentTask._id === action.payload) {\n        state.currentTask = null;\n      }\n      state.filteredTasks = applyFilters(state.tasks, state.filters);\n      state.loading = false;\n    },\n    deleteTaskFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setTaskFilters: (state, action: PayloadAction<TasksState['filters']>) => {\n      state.filters = action.payload;\n      state.filteredTasks = applyFilters(state.tasks, action.payload);\n    },\n    clearTaskFilters: (state) => {\n      state.filters = {};\n      state.filteredTasks = [...state.tasks];\n    },\n    clearCurrentTask: (state) => {\n      state.currentTask = null;\n    },\n  },\n});\n\n// Fonction utilitaire pour appliquer les filtres\nconst applyFilters = (tasks: Task[], filters: TasksState['filters']) => {\n  return tasks.filter(task => {\n    // Filtre par statut\n    if (filters.status && task.status !== filters.status) {\n      return false;\n    }\n    \n    // Filtre par client\n    if (filters.clientId && task.clientId !== filters.clientId) {\n      return false;\n    }\n    \n    // Filtre par catégorie\n    if (filters.category && task.category !== filters.category) {\n      return false;\n    }\n    \n    // Filtre par priorité\n    if (filters.priority && task.priority !== filters.priority) {\n      return false;\n    }\n    \n    // Filtre par date d'échéance\n    if (filters.dueDate) {\n      const dueDate = new Date(task.dueDate);\n      const filterDate = new Date(filters.dueDate);\n      \n      if (\n        dueDate.getFullYear() !== filterDate.getFullYear() ||\n        dueDate.getMonth() !== filterDate.getMonth() ||\n        dueDate.getDate() !== filterDate.getDate()\n      ) {\n        return false;\n      }\n    }\n    \n    return true;\n  });\n};\n\n// Actions\nexport const {\n  fetchTasksStart,\n  fetchTasksSuccess,\n  fetchTasksFailure,\n  fetchTaskStart,\n  fetchTaskSuccess,\n  fetchTaskFailure,\n  createTaskStart,\n  createTaskSuccess,\n  createTaskFailure,\n  updateTaskStart,\n  updateTaskSuccess,\n  updateTaskFailure,\n  deleteTaskStart,\n  deleteTaskSuccess,\n  deleteTaskFailure,\n  setTaskFilters,\n  clearTaskFilters,\n  clearCurrentTask,\n} = tasksSlice.actions;\n\n// Reducer\nexport default tasksSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}