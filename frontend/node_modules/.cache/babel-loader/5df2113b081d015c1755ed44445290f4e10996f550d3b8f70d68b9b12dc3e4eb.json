{"ast":null,"code":"import axios from 'axios';\n\n// URL de base de l'API (votre backend sur Render)\nconst API_URL = 'https://task-manager-api-yx13.onrender.com/api';\n\n// Configuration d'axios avec le token d'authentification\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['x-auth-token'] = token;\n  } else {\n    delete axios.defaults.headers.common['x-auth-token'];\n  }\n};\n\n// Service d'authentification\nconst authService = {\n  login: async (email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Stocker le token dans le localStorage\n      localStorage.setItem('token', token);\n\n      // Configurer axios avec le token\n      setAuthToken(token);\n      return user;\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    // Supprimer le token du localStorage\n    localStorage.removeItem('token');\n\n    // Supprimer le token des en-têtes axios\n    setAuthToken(null);\n  },\n  checkAuth: async () => {\n    // Vérifier si un token existe dans le localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return null;\n    }\n    try {\n      // Configurer axios avec le token\n      setAuthToken(token);\n\n      // Vérifier si le token est valide\n      const response = await axios.get(`${API_URL}/auth/user`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur de vérification d\\'authentification:', error);\n\n      // Si le token est invalide, déconnecter l'utilisateur\n      authService.logout();\n      return null;\n    }\n  }\n};\n\n// Service des clients\nconst clientsService = {\n  getClients: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/clients`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des clients:', error);\n      throw error;\n    }\n  },\n  getClient: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/clients/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du client ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Service des tâches\nconst tasksService = {\n  getTasks: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/tasks`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tâches:', error);\n      throw error;\n    }\n  },\n  getTask: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/tasks/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de la tâche ${id}:`, error);\n      throw error;\n    }\n  }\n};\nexport { authService, clientsService, tasksService, setAuthToken };","map":{"version":3,"names":["axios","API_URL","setAuthToken","token","defaults","headers","common","authService","login","email","password","response","post","user","data","localStorage","setItem","error","console","logout","removeItem","checkAuth","getItem","get","clientsService","getClients","getClient","id","tasksService","getTasks","getTask"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL de base de l'API (votre backend sur Render)\nconst API_URL = 'https://task-manager-api-yx13.onrender.com/api';\n\n// Configuration d'axios avec le token d'authentification\nconst setAuthToken = (token)  => {\n  if (token) {\n    axios.defaults.headers.common['x-auth-token'] = token;\n  } else {\n    delete axios.defaults.headers.common['x-auth-token'];\n  }\n};\n\n// Service d'authentification\nconst authService = {\n  login: async (email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, { email, password });\n      const { token, user } = response.data;\n      \n      // Stocker le token dans le localStorage\n      localStorage.setItem('token', token);\n      \n      // Configurer axios avec le token\n      setAuthToken(token);\n      \n      return user;\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      throw error;\n    }\n  },\n  \n  logout: () => {\n    // Supprimer le token du localStorage\n    localStorage.removeItem('token');\n    \n    // Supprimer le token des en-têtes axios\n    setAuthToken(null);\n  },\n  \n  checkAuth: async () => {\n    // Vérifier si un token existe dans le localStorage\n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      return null;\n    }\n    \n    try {\n      // Configurer axios avec le token\n      setAuthToken(token);\n      \n      // Vérifier si le token est valide\n      const response = await axios.get(`${API_URL}/auth/user`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur de vérification d\\'authentification:', error);\n      \n      // Si le token est invalide, déconnecter l'utilisateur\n      authService.logout();\n      return null;\n    }\n  }\n};\n\n// Service des clients\nconst clientsService = {\n  getClients: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/clients`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des clients:', error);\n      throw error;\n    }\n  },\n  \n  getClient: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/clients/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération du client ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Service des tâches\nconst tasksService = {\n  getTasks: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/tasks`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des tâches:', error);\n      throw error;\n    }\n  },\n  \n  getTask: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/tasks/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erreur lors de la récupération de la tâche ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport { authService, clientsService, tasksService, setAuthToken };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}