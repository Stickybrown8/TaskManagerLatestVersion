{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Types\n\n// État initial\nconst initialState = {\n  clients: [],\n  currentClient: null,\n  loading: false,\n  error: null\n};\n\n// Slice\nconst clientsSlice = createSlice({\n  name: 'clients',\n  initialState,\n  reducers: {\n    fetchClientsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchClientsSuccess: (state, action) => {\n      state.clients = action.payload;\n      state.loading = false;\n    },\n    fetchClientsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchClientStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchClientSuccess: (state, action) => {\n      state.currentClient = action.payload;\n      state.loading = false;\n    },\n    fetchClientFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createClientStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    createClientSuccess: (state, action) => {\n      state.clients.push(action.payload);\n      state.loading = false;\n    },\n    createClientFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateClientStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateClientSuccess: (state, action) => {\n      const index = state.clients.findIndex(client => client._id === action.payload._id);\n      if (index !== -1) {\n        state.clients[index] = action.payload;\n      }\n      if (state.currentClient && state.currentClient._id === action.payload._id) {\n        state.currentClient = action.payload;\n      }\n      state.loading = false;\n    },\n    updateClientFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteClientStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteClientSuccess: (state, action) => {\n      state.clients = state.clients.filter(client => client._id !== action.payload);\n      if (state.currentClient && state.currentClient._id === action.payload) {\n        state.currentClient = null;\n      }\n      state.loading = false;\n    },\n    deleteClientFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    clearCurrentClient: state => {\n      state.currentClient = null;\n    }\n  }\n});\n\n// Actions\nexport const {\n  fetchClientsStart,\n  fetchClientsSuccess,\n  fetchClientsFailure,\n  fetchClientStart,\n  fetchClientSuccess,\n  fetchClientFailure,\n  createClientStart,\n  createClientSuccess,\n  createClientFailure,\n  updateClientStart,\n  updateClientSuccess,\n  updateClientFailure,\n  deleteClientStart,\n  deleteClientSuccess,\n  deleteClientFailure,\n  clearCurrentClient\n} = clientsSlice.actions;\n\n// Reducer\nexport default clientsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","clients","currentClient","loading","error","clientsSlice","name","reducers","fetchClientsStart","state","fetchClientsSuccess","action","payload","fetchClientsFailure","fetchClientStart","fetchClientSuccess","fetchClientFailure","createClientStart","createClientSuccess","push","createClientFailure","updateClientStart","updateClientSuccess","index","findIndex","client","_id","updateClientFailure","deleteClientStart","deleteClientSuccess","filter","deleteClientFailure","clearCurrentClient","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/clientsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Types\ninterface Client {\n  _id: string;\n  name: string;\n  description: string;\n  status: 'actif' | 'inactif' | 'archivé';\n  contacts: Contact[];\n  notes: string;\n  tags: string[];\n  metrics: {\n    tasksCompleted: number;\n    tasksInProgress: number;\n    tasksPending: number;\n    lastActivity: string;\n  };\n}\n\ninterface Contact {\n  name: string;\n  role: string;\n  email: string;\n  phone: string;\n  isMain: boolean;\n}\n\ninterface ClientsState {\n  clients: Client[];\n  currentClient: Client | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// État initial\nconst initialState: ClientsState = {\n  clients: [],\n  currentClient: null,\n  loading: false,\n  error: null,\n};\n\n// Slice\nconst clientsSlice = createSlice({\n  name: 'clients',\n  initialState,\n  reducers: {\n    fetchClientsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchClientsSuccess: (state, action: PayloadAction<Client[]>) => {\n      state.clients = action.payload;\n      state.loading = false;\n    },\n    fetchClientsFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchClientSuccess: (state, action: PayloadAction<Client>) => {\n      state.currentClient = action.payload;\n      state.loading = false;\n    },\n    fetchClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    createClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    createClientSuccess: (state, action: PayloadAction<Client>) => {\n      state.clients.push(action.payload);\n      state.loading = false;\n    },\n    createClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateClientSuccess: (state, action: PayloadAction<Client>) => {\n      const index = state.clients.findIndex(client => client._id === action.payload._id);\n      if (index !== -1) {\n        state.clients[index] = action.payload;\n      }\n      if (state.currentClient && state.currentClient._id === action.payload._id) {\n        state.currentClient = action.payload;\n      }\n      state.loading = false;\n    },\n    updateClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    deleteClientStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    deleteClientSuccess: (state, action: PayloadAction<string>) => {\n      state.clients = state.clients.filter(client => client._id !== action.payload);\n      if (state.currentClient && state.currentClient._id === action.payload) {\n        state.currentClient = null;\n      }\n      state.loading = false;\n    },\n    deleteClientFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    clearCurrentClient: (state) => {\n      state.currentClient = null;\n    },\n  },\n});\n\n// Actions\nexport const {\n  fetchClientsStart,\n  fetchClientsSuccess,\n  fetchClientsFailure,\n  fetchClientStart,\n  fetchClientSuccess,\n  fetchClientFailure,\n  createClientStart,\n  createClientSuccess,\n  createClientFailure,\n  updateClientStart,\n  updateClientSuccess,\n  updateClientFailure,\n  deleteClientStart,\n  deleteClientSuccess,\n  deleteClientFailure,\n  clearCurrentClient,\n} = clientsSlice.actions;\n\n// Reducer\nexport default clientsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}