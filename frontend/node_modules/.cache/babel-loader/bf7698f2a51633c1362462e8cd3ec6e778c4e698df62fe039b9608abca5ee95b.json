{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Types\n\n// État initial\nconst initialState = {\n  level: 1,\n  experience: 0,\n  actionPoints: 0,\n  totalPointsEarned: 0,\n  currentStreak: 0,\n  longestStreak: 0,\n  badges: [],\n  activities: [],\n  levels: [],\n  loading: false,\n  error: null,\n  rewardAnimation: {\n    show: false,\n    type: null,\n    data: null\n  }\n};\n\n// Slice\nconst gamificationSlice = createSlice({\n  name: 'gamification',\n  initialState,\n  reducers: {\n    fetchGamificationProfileStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchGamificationProfileSuccess: (state, action) => {\n      return {\n        ...state,\n        ...action.payload,\n        loading: false\n      };\n    },\n    fetchGamificationProfileFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchBadgesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchBadgesSuccess: (state, action) => {\n      state.badges = action.payload;\n      state.loading = false;\n    },\n    fetchBadgesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchActivitiesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchActivitiesSuccess: (state, action) => {\n      state.activities = action.payload;\n      state.loading = false;\n    },\n    fetchActivitiesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchLevelsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchLevelsSuccess: (state, action) => {\n      state.levels = action.payload;\n      state.loading = false;\n    },\n    fetchLevelsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addExperienceStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    addExperienceSuccess: (state, action) => {\n      state.experience = action.payload.newExperience;\n      state.level = action.payload.newLevel;\n      state.loading = false;\n\n      // Afficher l'animation de récompense si level up\n      if (action.payload.levelUp) {\n        state.rewardAnimation = {\n          show: true,\n          type: 'level',\n          data: {\n            level: action.payload.newLevel\n          }\n        };\n      }\n    },\n    addExperienceFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addActionPointsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    addActionPointsSuccess: (state, action) => {\n      state.actionPoints = action.payload.newActionPoints;\n      state.totalPointsEarned = action.payload.totalPointsEarned;\n      state.loading = false;\n\n      // Afficher l'animation de récompense\n      state.rewardAnimation = {\n        show: true,\n        type: 'points',\n        data: {\n          points: action.payload.newActionPoints - state.actionPoints\n        }\n      };\n    },\n    addActionPointsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateStreakStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateStreakSuccess: (state, action) => {\n      state.currentStreak = action.payload.currentStreak;\n      state.longestStreak = action.payload.longestStreak;\n      state.loading = false;\n    },\n    updateStreakFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    earnBadgeStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    earnBadgeSuccess: (state, action) => {\n      state.badges.push(action.payload);\n      state.loading = false;\n\n      // Afficher l'animation de récompense\n      state.rewardAnimation = {\n        show: true,\n        type: 'badge',\n        data: action.payload\n      };\n    },\n    earnBadgeFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    hideRewardAnimation: state => {\n      state.rewardAnimation.show = false;\n    }\n  }\n});\n\n// Actions\nexport const {\n  fetchGamificationProfileStart,\n  fetchGamificationProfileSuccess,\n  fetchGamificationProfileFailure,\n  fetchBadgesStart,\n  fetchBadgesSuccess,\n  fetchBadgesFailure,\n  fetchActivitiesStart,\n  fetchActivitiesSuccess,\n  fetchActivitiesFailure,\n  fetchLevelsStart,\n  fetchLevelsSuccess,\n  fetchLevelsFailure,\n  addExperienceStart,\n  addExperienceSuccess,\n  addExperienceFailure,\n  addActionPointsStart,\n  addActionPointsSuccess,\n  addActionPointsFailure,\n  updateStreakStart,\n  updateStreakSuccess,\n  updateStreakFailure,\n  earnBadgeStart,\n  earnBadgeSuccess,\n  earnBadgeFailure,\n  hideRewardAnimation\n} = gamificationSlice.actions;\n\n// Reducer\nexport default gamificationSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","level","experience","actionPoints","totalPointsEarned","currentStreak","longestStreak","badges","activities","levels","loading","error","rewardAnimation","show","type","data","gamificationSlice","name","reducers","fetchGamificationProfileStart","state","fetchGamificationProfileSuccess","action","payload","fetchGamificationProfileFailure","fetchBadgesStart","fetchBadgesSuccess","fetchBadgesFailure","fetchActivitiesStart","fetchActivitiesSuccess","fetchActivitiesFailure","fetchLevelsStart","fetchLevelsSuccess","fetchLevelsFailure","addExperienceStart","addExperienceSuccess","newExperience","newLevel","levelUp","addExperienceFailure","addActionPointsStart","addActionPointsSuccess","newActionPoints","points","addActionPointsFailure","updateStreakStart","updateStreakSuccess","updateStreakFailure","earnBadgeStart","earnBadgeSuccess","push","earnBadgeFailure","hideRewardAnimation","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/gamificationSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Types\ninterface GamificationState {\n  level: number;\n  experience: number;\n  actionPoints: number;\n  totalPointsEarned: number;\n  currentStreak: number;\n  longestStreak: number;\n  badges: Badge[];\n  activities: Activity[];\n  levels: Level[];\n  loading: boolean;\n  error: string | null;\n  rewardAnimation: {\n    show: boolean;\n    type: 'experience' | 'badge' | 'level' | 'points' | null;\n    data: any;\n  };\n}\n\ninterface Badge {\n  _id: string;\n  name: string;\n  description: string;\n  category: string;\n  level: number;\n  icon: string;\n  rarity: 'commun' | 'rare' | 'épique' | 'légendaire';\n  earnedAt?: string;\n  displayed?: boolean;\n}\n\ninterface Activity {\n  _id: string;\n  type: string;\n  description: string;\n  timestamp: string;\n  details: {\n    taskId?: string;\n    clientId?: string;\n    badgeId?: string;\n    pointsEarned?: number;\n    experienceEarned?: number;\n    levelUp?: boolean;\n  };\n}\n\ninterface Level {\n  _id: string;\n  level: number;\n  name: string;\n  experienceRequired: number;\n  rewards: {\n    actionPoints: number;\n    features: string[];\n    themes: string[];\n    avatars: string[];\n  };\n  icon: string;\n}\n\n// État initial\nconst initialState: GamificationState = {\n  level: 1,\n  experience: 0,\n  actionPoints: 0,\n  totalPointsEarned: 0,\n  currentStreak: 0,\n  longestStreak: 0,\n  badges: [],\n  activities: [],\n  levels: [],\n  loading: false,\n  error: null,\n  rewardAnimation: {\n    show: false,\n    type: null,\n    data: null,\n  },\n};\n\n// Slice\nconst gamificationSlice = createSlice({\n  name: 'gamification',\n  initialState,\n  reducers: {\n    fetchGamificationProfileStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchGamificationProfileSuccess: (state, action: PayloadAction<Partial<GamificationState>>) => {\n      return {\n        ...state,\n        ...action.payload,\n        loading: false,\n      };\n    },\n    fetchGamificationProfileFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchBadgesStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchBadgesSuccess: (state, action: PayloadAction<Badge[]>) => {\n      state.badges = action.payload;\n      state.loading = false;\n    },\n    fetchBadgesFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchActivitiesStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchActivitiesSuccess: (state, action: PayloadAction<Activity[]>) => {\n      state.activities = action.payload;\n      state.loading = false;\n    },\n    fetchActivitiesFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchLevelsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchLevelsSuccess: (state, action: PayloadAction<Level[]>) => {\n      state.levels = action.payload;\n      state.loading = false;\n    },\n    fetchLevelsFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addExperienceStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    addExperienceSuccess: (state, action: PayloadAction<{\n      newExperience: number;\n      newLevel: number;\n      levelUp: boolean;\n    }>) => {\n      state.experience = action.payload.newExperience;\n      state.level = action.payload.newLevel;\n      state.loading = false;\n      \n      // Afficher l'animation de récompense si level up\n      if (action.payload.levelUp) {\n        state.rewardAnimation = {\n          show: true,\n          type: 'level',\n          data: {\n            level: action.payload.newLevel,\n          },\n        };\n      }\n    },\n    addExperienceFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    addActionPointsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    addActionPointsSuccess: (state, action: PayloadAction<{\n      newActionPoints: number;\n      totalPointsEarned: number;\n    }>) => {\n      state.actionPoints = action.payload.newActionPoints;\n      state.totalPointsEarned = action.payload.totalPointsEarned;\n      state.loading = false;\n      \n      // Afficher l'animation de récompense\n      state.rewardAnimation = {\n        show: true,\n        type: 'points',\n        data: {\n          points: action.payload.newActionPoints - state.actionPoints,\n        },\n      };\n    },\n    addActionPointsFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateStreakStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateStreakSuccess: (state, action: PayloadAction<{\n      currentStreak: number;\n      longestStreak: number;\n    }>) => {\n      state.currentStreak = action.payload.currentStreak;\n      state.longestStreak = action.payload.longestStreak;\n      state.loading = false;\n    },\n    updateStreakFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    earnBadgeStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    earnBadgeSuccess: (state, action: PayloadAction<Badge>) => {\n      state.badges.push(action.payload);\n      state.loading = false;\n      \n      // Afficher l'animation de récompense\n      state.rewardAnimation = {\n        show: true,\n        type: 'badge',\n        data: action.payload,\n      };\n    },\n    earnBadgeFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    hideRewardAnimation: (state) => {\n      state.rewardAnimation.show = false;\n    },\n  },\n});\n\n// Actions\nexport const {\n  fetchGamificationProfileStart,\n  fetchGamificationProfileSuccess,\n  fetchGamificationProfileFailure,\n  fetchBadgesStart,\n  fetchBadgesSuccess,\n  fetchBadgesFailure,\n  fetchActivitiesStart,\n  fetchActivitiesSuccess,\n  fetchActivitiesFailure,\n  fetchLevelsStart,\n  fetchLevelsSuccess,\n  fetchLevelsFailure,\n  addExperienceStart,\n  addExperienceSuccess,\n  addExperienceFailure,\n  addActionPointsStart,\n  addActionPointsSuccess,\n  addActionPointsFailure,\n  updateStreakStart,\n  updateStreakSuccess,\n  updateStreakFailure,\n  earnBadgeStart,\n  earnBadgeSuccess,\n  earnBadgeFailure,\n  hideRewardAnimation,\n} = gamificationSlice.actions;\n\n// Reducer\nexport default gamificationSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}