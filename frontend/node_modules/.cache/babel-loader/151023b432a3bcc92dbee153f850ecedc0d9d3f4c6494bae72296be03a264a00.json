{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{timerService}from'../../services/api';// Thunks\nexport const fetchAllTimers=createAsyncThunk('timer/fetchAll',async(_,_ref)=>{let{rejectWithValue}=_ref;try{const timers=await timerService.getAllTimers();return timers;}catch(error){var _error$response,_error$response$data;return rejectWithValue(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.msg)||'Erreur lors de la récupération des chronomètres');}});export const fetchRunningTimer=createAsyncThunk('timer/fetchRunning',async(_,_ref2)=>{let{rejectWithValue}=_ref2;try{const timer=await timerService.getRunningTimer();return timer;}catch(error){var _error$response2,_error$response3,_error$response3$data;if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){return null;// Pas de chronomètre en cours\n}return rejectWithValue(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.msg)||'Erreur lors de la récupération du chronomètre en cours');}});export const fetchTimerById=createAsyncThunk('timer/fetchById',async(id,_ref3)=>{let{rejectWithValue}=_ref3;try{const timer=await timerService.getTimerById(id);return timer;}catch(error){var _error$response4,_error$response4$data;return rejectWithValue(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.msg)||'Erreur lors de la récupération du chronomètre');}});export const startTimer=createAsyncThunk('timer/start',async(timerData,_ref4)=>{let{rejectWithValue}=_ref4;try{const timer=await timerService.startTimer(timerData);return timer;}catch(error){var _error$response5;return rejectWithValue(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data)||'Erreur lors du démarrage du chronomètre');}});export const pauseTimer=createAsyncThunk('timer/pause',async(id,_ref5)=>{let{rejectWithValue}=_ref5;try{const timer=await timerService.pauseTimer(id);return timer;}catch(error){var _error$response6,_error$response6$data;return rejectWithValue(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.msg)||'Erreur lors de la mise en pause du chronomètre');}});export const resumeTimer=createAsyncThunk('timer/resume',async(id,_ref6)=>{let{rejectWithValue}=_ref6;try{const timer=await timerService.resumeTimer(id);return timer;}catch(error){var _error$response7;return rejectWithValue(((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||'Erreur lors de la reprise du chronomètre');}});export const stopTimer=createAsyncThunk('timer/stop',async(id,_ref7)=>{let{rejectWithValue}=_ref7;try{const timer=await timerService.stopTimer(id);return timer;}catch(error){var _error$response8,_error$response8$data;return rejectWithValue(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.msg)||'Erreur lors de l\\'arrêt du chronomètre');}});export const deleteTimer=createAsyncThunk('timer/delete',async(id,_ref8)=>{let{rejectWithValue}=_ref8;try{await timerService.deleteTimer(id);return id;}catch(error){var _error$response9,_error$response9$data;return rejectWithValue(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.msg)||'Erreur lors de la suppression du chronomètre');}});export const fetchClientTimers=createAsyncThunk('timer/fetchByClient',async(clientId,_ref9)=>{let{rejectWithValue}=_ref9;try{const timers=await timerService.getClientTimers(clientId);return{clientId,timers};}catch(error){var _error$response10,_error$response10$dat;return rejectWithValue(((_error$response10=error.response)===null||_error$response10===void 0?void 0:(_error$response10$dat=_error$response10.data)===null||_error$response10$dat===void 0?void 0:_error$response10$dat.msg)||'Erreur lors de la récupération des chronomètres du client');}});export const fetchTaskTimers=createAsyncThunk('timer/fetchByTask',async(taskId,_ref10)=>{let{rejectWithValue}=_ref10;try{const timers=await timerService.getTaskTimers(taskId);return{taskId,timers};}catch(error){var _error$response11,_error$response11$dat;return rejectWithValue(((_error$response11=error.response)===null||_error$response11===void 0?void 0:(_error$response11$dat=_error$response11.data)===null||_error$response11$dat===void 0?void 0:_error$response11$dat.msg)||'Erreur lors de la récupération des chronomètres de la tâche');}});// Slice\nconst timerSlice=createSlice({name:'timer',initialState:{timers:[],runningTimer:null,currentTimer:null,clientTimers:{},taskTimers:{},loading:false,error:null,timerPopupVisible:false,timerPopupSize:'standard',// 'compact', 'standard', 'expanded'\ntimerPopupPosition:{x:20,y:20}},reducers:{clearTimerError:state=>{state.error=null;},setCurrentTimer:(state,action)=>{state.currentTimer=action.payload;},clearCurrentTimer:state=>{state.currentTimer=null;},showTimerPopup:state=>{state.timerPopupVisible=true;},hideTimerPopup:state=>{state.timerPopupVisible=false;},setTimerPopupSize:(state,action)=>{state.timerPopupSize=action.payload;},setTimerPopupPosition:(state,action)=>{state.timerPopupPosition=action.payload;},updateRunningTimerDuration:state=>{if(state.runningTimer&&state.runningTimer.isRunning){// Calculer la durée actuelle\nconst startTime=new Date(state.runningTimer.startTime).getTime();const now=Date.now();let totalDuration=Math.floor((now-startTime)/1000);// Soustraire le temps total de pause\ntotalDuration-=state.runningTimer.totalPausedTime||0;// Mettre à jour la durée\nstate.runningTimer.currentDuration=totalDuration;}}},extraReducers:builder=>{builder// fetchAllTimers\n.addCase(fetchAllTimers.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchAllTimers.fulfilled,(state,action)=>{state.loading=false;state.timers=action.payload;}).addCase(fetchAllTimers.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// fetchRunningTimer\n.addCase(fetchRunningTimer.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchRunningTimer.fulfilled,(state,action)=>{state.loading=false;state.runningTimer=action.payload;// Si un chronomètre est en cours, afficher la popup\nif(action.payload){state.timerPopupVisible=true;}}).addCase(fetchRunningTimer.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// fetchTimerById\n.addCase(fetchTimerById.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchTimerById.fulfilled,(state,action)=>{state.loading=false;state.currentTimer=action.payload;// Mettre à jour dans la liste complète si elle existe\nconst index=state.timers.findIndex(t=>t._id===action.payload._id);if(index!==-1){state.timers[index]=action.payload;}}).addCase(fetchTimerById.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// startTimer\n.addCase(startTimer.pending,state=>{state.loading=true;state.error=null;}).addCase(startTimer.fulfilled,(state,action)=>{state.loading=false;state.runningTimer=action.payload;state.timerPopupVisible=true;// Ajouter à la liste complète\nstate.timers.unshift(action.payload);// Ajouter aux listes spécifiques si nécessaire\nif(action.payload.clientId){const clientId=action.payload.clientId._id;if(state.clientTimers[clientId]){state.clientTimers[clientId].unshift(action.payload);}}if(action.payload.taskId){const taskId=action.payload.taskId._id;if(state.taskTimers[taskId]){state.taskTimers[taskId].unshift(action.payload);}}}).addCase(startTimer.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// pauseTimer\n.addCase(pauseTimer.pending,state=>{state.loading=true;state.error=null;}).addCase(pauseTimer.fulfilled,(state,action)=>{state.loading=false;state.runningTimer=action.payload;// Mettre à jour dans la liste complète\nconst index=state.timers.findIndex(t=>t._id===action.payload._id);if(index!==-1){state.timers[index]=action.payload;}// Mettre à jour dans les listes spécifiques\nif(action.payload.clientId){const clientId=action.payload.clientId._id;if(state.clientTimers[clientId]){const clientIndex=state.clientTimers[clientId].findIndex(t=>t._id===action.payload._id);if(clientIndex!==-1){state.clientTimers[clientId][clientIndex]=action.payload;}}}if(action.payload.taskId){const taskId=action.payload.taskId._id;if(state.taskTimers[taskId]){const taskIndex=state.taskTimers[taskId].findIndex(t=>t._id===action.payload._id);if(taskIndex!==-1){state.taskTimers[taskId][taskIndex]=action.payload;}}}}).addCase(pauseTimer.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// resumeTimer\n.addCase(resumeTimer.pending,state=>{state.loading=true;state.error=null;}).addCase(resumeTimer.fulfilled,(state,action)=>{state.loading=false;state.runningTimer=action.payload;// Mettre à jour dans la liste complète\nconst index=state.timers.findIndex(t=>t._id===action.payload._id);if(index!==-1){state.timers[index]=action.payload;}// Mettre à jour dans les listes spécifiques\nif(action.payload.clientId){const clientId=action.payload.clientId._id;if(state.clientTimers[clientId]){const clientIndex=state.clientTimers[clientId].findIndex(t=>t._id===action.payload._id);if(clientIndex!==-1){state.clientTimers[clientId][clientIndex]=action.payload;}}}if(action.payload.taskId){const taskId=action.payload.taskId._id;if(state.taskTimers[taskId]){const taskIndex=state.taskTimers[taskId].findIndex(t=>t._id===action.payload._id);if(taskIndex!==-1){state.taskTimers[taskId][taskIndex]=action.payload;}}}}).addCase(resumeTimer.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// stopTimer\n.addCase(stopTimer.pending,state=>{state.loading=true;state.error=null;}).addCase(stopTimer.fulfilled,(state,action)=>{state.loading=false;state.runningTimer=null;// Mettre à jour dans la liste complète\nconst index=state.timers.findIndex(t=>t._id===action.payload._id);if(index!==-1){state.timers[index]=action.payload;}// Mettre à jour dans les listes spécifiques\nif(action.payload.clientId){const clientId=action.payload.clientId._id;if(state.clientTimers[clientId]){const clientIndex=state.clientTimers[clientId].findIndex(t=>t._id===action.payload._id);if(clientIndex!==-1){state.clientTimers[clientId][clientIndex]=action.payload;}}}if(action.payload.taskId){const taskId=action.payload.taskId._id;if(state.taskTimers[taskId]){const taskIndex=state.taskTimers[taskId].findIndex(t=>t._id===action.payload._id);if(taskIndex!==-1){state.taskTimers[taskId][taskIndex]=action.payload;}}}}).addCase(stopTimer.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// deleteTimer\n.addCase(deleteTimer.pending,state=>{state.loading=true;state.error=null;}).addCase(deleteTimer.fulfilled,(state,action)=>{state.loading=false;// Supprimer de la liste complète\nstate.timers=state.timers.filter(t=>t._id!==action.payload);// Supprimer des listes spécifiques\nObject.keys(state.clientTimers).forEach(clientId=>{state.clientTimers[clientId]=state.clientTimers[clientId].filter(t=>t._id!==action.payload);});Object.keys(state.taskTimers).forEach(taskId=>{state.taskTimers[taskId]=state.taskTimers[taskId].filter(t=>t._id!==action.payload);});// Réinitialiser le chronomètre en cours si nécessaire\nif(state.runningTimer&&state.runningTimer._id===action.payload){state.runningTimer=null;}// Réinitialiser le chronomètre courant si nécessaire\nif(state.currentTimer&&state.currentTimer._id===action.payload){state.currentTimer=null;}}).addCase(deleteTimer.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// fetchClientTimers\n.addCase(fetchClientTimers.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchClientTimers.fulfilled,(state,action)=>{state.loading=false;state.clientTimers[action.payload.clientId]=action.payload.timers;}).addCase(fetchClientTimers.rejected,(state,action)=>{state.loading=false;state.error=action.payload;})// fetchTaskTimers\n.addCase(fetchTaskTimers.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchTaskTimers.fulfilled,(state,action)=>{state.loading=false;state.taskTimers[action.payload.taskId]=action.payload.timers;}).addCase(fetchTaskTimers.rejected,(state,action)=>{state.loading=false;state.error=action.payload;});}});export const{clearTimerError,setCurrentTimer,clearCurrentTimer,showTimerPopup,hideTimerPopup,setTimerPopupSize,setTimerPopupPosition,updateRunningTimerDuration}=timerSlice.actions;export default timerSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","timerService","fetchAllTimers","_","_ref","rejectWithValue","timers","getAllTimers","error","_error$response","_error$response$data","response","data","msg","fetchRunningTimer","_ref2","timer","getRunningTimer","_error$response2","_error$response3","_error$response3$data","status","fetchTimerById","id","_ref3","getTimerById","_error$response4","_error$response4$data","startTimer","timerData","_ref4","_error$response5","pauseTimer","_ref5","_error$response6","_error$response6$data","resumeTimer","_ref6","_error$response7","stopTimer","_ref7","_error$response8","_error$response8$data","deleteTimer","_ref8","_error$response9","_error$response9$data","fetchClientTimers","clientId","_ref9","getClientTimers","_error$response10","_error$response10$dat","fetchTaskTimers","taskId","_ref10","getTaskTimers","_error$response11","_error$response11$dat","timerSlice","name","initialState","runningTimer","currentTimer","clientTimers","taskTimers","loading","timerPopupVisible","timerPopupSize","timerPopupPosition","x","y","reducers","clearTimerError","state","setCurrentTimer","action","payload","clearCurrentTimer","showTimerPopup","hideTimerPopup","setTimerPopupSize","setTimerPopupPosition","updateRunningTimerDuration","isRunning","startTime","Date","getTime","now","totalDuration","Math","floor","totalPausedTime","currentDuration","extraReducers","builder","addCase","pending","fulfilled","rejected","index","findIndex","t","_id","unshift","clientIndex","taskIndex","filter","Object","keys","forEach","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/timerSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { timerService } from '../../services/api';\n\n// Thunks\nexport const fetchAllTimers = createAsyncThunk(\n  'timer/fetchAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      const timers = await timerService.getAllTimers();\n      return timers;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération des chronomètres');\n    }\n  }\n);\n\nexport const fetchRunningTimer = createAsyncThunk(\n  'timer/fetchRunning',\n  async (_, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.getRunningTimer();\n      return timer;\n    } catch (error) {\n      if (error.response?.status === 404) {\n        return null; // Pas de chronomètre en cours\n      }\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération du chronomètre en cours');\n    }\n  }\n);\n\nexport const fetchTimerById = createAsyncThunk(\n  'timer/fetchById',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.getTimerById(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération du chronomètre');\n    }\n  }\n);\n\nexport const startTimer = createAsyncThunk(\n  'timer/start',\n  async (timerData, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.startTimer(timerData);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data || 'Erreur lors du démarrage du chronomètre');\n    }\n  }\n);\n\nexport const pauseTimer = createAsyncThunk(\n  'timer/pause',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.pauseTimer(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la mise en pause du chronomètre');\n    }\n  }\n);\n\nexport const resumeTimer = createAsyncThunk(\n  'timer/resume',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.resumeTimer(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data || 'Erreur lors de la reprise du chronomètre');\n    }\n  }\n);\n\nexport const stopTimer = createAsyncThunk(\n  'timer/stop',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.stopTimer(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de l\\'arrêt du chronomètre');\n    }\n  }\n);\n\nexport const deleteTimer = createAsyncThunk(\n  'timer/delete',\n  async (id, { rejectWithValue }) => {\n    try {\n      await timerService.deleteTimer(id);\n      return id;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la suppression du chronomètre');\n    }\n  }\n);\n\nexport const fetchClientTimers = createAsyncThunk(\n  'timer/fetchByClient',\n  async (clientId, { rejectWithValue }) => {\n    try {\n      const timers = await timerService.getClientTimers(clientId);\n      return { clientId, timers };\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération des chronomètres du client');\n    }\n  }\n);\n\nexport const fetchTaskTimers = createAsyncThunk(\n  'timer/fetchByTask',\n  async (taskId, { rejectWithValue }) => {\n    try {\n      const timers = await timerService.getTaskTimers(taskId);\n      return { taskId, timers };\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération des chronomètres de la tâche');\n    }\n  }\n);\n\n// Slice\nconst timerSlice = createSlice({\n  name: 'timer',\n  initialState: {\n    timers: [],\n    runningTimer: null,\n    currentTimer: null,\n    clientTimers: {},\n    taskTimers: {},\n    loading: false,\n    error: null,\n    timerPopupVisible: false,\n    timerPopupSize: 'standard', // 'compact', 'standard', 'expanded'\n    timerPopupPosition: { x: 20, y: 20 }\n  },\n  reducers: {\n    clearTimerError: (state) => {\n      state.error = null;\n    },\n    setCurrentTimer: (state, action) => {\n      state.currentTimer = action.payload;\n    },\n    clearCurrentTimer: (state) => {\n      state.currentTimer = null;\n    },\n    showTimerPopup: (state) => {\n      state.timerPopupVisible = true;\n    },\n    hideTimerPopup: (state) => {\n      state.timerPopupVisible = false;\n    },\n    setTimerPopupSize: (state, action) => {\n      state.timerPopupSize = action.payload;\n    },\n    setTimerPopupPosition: (state, action) => {\n      state.timerPopupPosition = action.payload;\n    },\n    updateRunningTimerDuration: (state) => {\n      if (state.runningTimer && state.runningTimer.isRunning) {\n        // Calculer la durée actuelle\n        const startTime = new Date(state.runningTimer.startTime).getTime();\n        const now = Date.now();\n        let totalDuration = Math.floor((now - startTime) / 1000);\n        \n        // Soustraire le temps total de pause\n        totalDuration -= state.runningTimer.totalPausedTime || 0;\n        \n        // Mettre à jour la durée\n        state.runningTimer.currentDuration = totalDuration;\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // fetchAllTimers\n      .addCase(fetchAllTimers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchAllTimers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.timers = action.payload;\n      })\n      .addCase(fetchAllTimers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchRunningTimer\n      .addCase(fetchRunningTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchRunningTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        \n        // Si un chronomètre est en cours, afficher la popup\n        if (action.payload) {\n          state.timerPopupVisible = true;\n        }\n      })\n      .addCase(fetchRunningTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchTimerById\n      .addCase(fetchTimerById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTimerById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentTimer = action.payload;\n        \n        // Mettre à jour dans la liste complète si elle existe\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n      })\n      .addCase(fetchTimerById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // startTimer\n      .addCase(startTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(startTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        state.timerPopupVisible = true;\n        \n        // Ajouter à la liste complète\n        state.timers.unshift(action.payload);\n        \n        // Ajouter aux listes spécifiques si nécessaire\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            state.clientTimers[clientId].unshift(action.payload);\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            state.taskTimers[taskId].unshift(action.payload);\n          }\n        }\n      })\n      .addCase(startTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // pauseTimer\n      .addCase(pauseTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(pauseTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        \n        // Mettre à jour dans la liste complète\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n        \n        // Mettre à jour dans les listes spécifiques\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n            if (clientIndex !== -1) {\n              state.clientTimers[clientId][clientIndex] = action.payload;\n            }\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n            if (taskIndex !== -1) {\n              state.taskTimers[taskId][taskIndex] = action.payload;\n            }\n          }\n        }\n      })\n      .addCase(pauseTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // resumeTimer\n      .addCase(resumeTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(resumeTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        \n        // Mettre à jour dans la liste complète\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n        \n        // Mettre à jour dans les listes spécifiques\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n            if (clientIndex !== -1) {\n              state.clientTimers[clientId][clientIndex] = action.payload;\n            }\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n            if (taskIndex !== -1) {\n              state.taskTimers[taskId][taskIndex] = action.payload;\n            }\n          }\n        }\n      })\n      .addCase(resumeTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // stopTimer\n      .addCase(stopTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(stopTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = null;\n        \n        // Mettre à jour dans la liste complète\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n        \n        // Mettre à jour dans les listes spécifiques\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n            if (clientIndex !== -1) {\n              state.clientTimers[clientId][clientIndex] = action.payload;\n            }\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n            if (taskIndex !== -1) {\n              state.taskTimers[taskId][taskIndex] = action.payload;\n            }\n          }\n        }\n      })\n      .addCase(stopTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // deleteTimer\n      .addCase(deleteTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(deleteTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        \n        // Supprimer de la liste complète\n        state.timers = state.timers.filter(t => t._id !== action.payload);\n        \n        // Supprimer des listes spécifiques\n        Object.keys(state.clientTimers).forEach(clientId => {\n          state.clientTimers[clientId] = state.clientTimers[clientId].filter(t => t._id !== action.payload);\n        });\n        \n        Object.keys(state.taskTimers).forEach(taskId => {\n          state.taskTimers[taskId] = state.taskTimers[taskId].filter(t => t._id !== action.payload);\n        });\n        \n        // Réinitialiser le chronomètre en cours si nécessaire\n        if (state.runningTimer && state.runningTimer._id === action.payload) {\n          state.runningTimer = null;\n        }\n        \n        // Réinitialiser le chronomètre courant si nécessaire\n        if (state.currentTimer && state.currentTimer._id === action.payload) {\n          state.currentTimer = null;\n        }\n      })\n      .addCase(deleteTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchClientTimers\n      .addCase(fetchClientTimers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchClientTimers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.clientTimers[action.payload.clientId] = action.payload.timers;\n      })\n      .addCase(fetchClientTimers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchTaskTimers\n      .addCase(fetchTaskTimers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTaskTimers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.taskTimers[action.payload.taskId] = action.payload.timers;\n      })\n      .addCase(fetchTaskTimers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { \n  clearTimerError, \n  setCurrentTimer, \n  clearCurrentTimer,\n  showTimerPopup,\n  hideTimerPopup,\n  setTimerPopupSize,\n  setTimerPopupPosition,\n  updateRunningTimerDuration\n} = timerSlice.actions;\n\nexport default timerSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}