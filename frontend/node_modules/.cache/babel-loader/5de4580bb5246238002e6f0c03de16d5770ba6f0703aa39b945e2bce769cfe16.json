{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { timerService } from '../../services/api';\n\n// Thunks\nexport const fetchAllTimers = createAsyncThunk('timer/fetchAll', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const timers = await timerService.getAllTimers();\n    return timers;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.msg) || 'Erreur lors de la récupération des chronomètres');\n  }\n});\nexport const fetchRunningTimer = createAsyncThunk('timer/fetchRunning', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const timer = await timerService.getRunningTimer();\n    return timer;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      return null; // Pas de chronomètre en cours\n    }\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.msg) || 'Erreur lors de la récupération du chronomètre en cours');\n  }\n});\nexport const fetchTimerById = createAsyncThunk('timer/fetchById', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const timer = await timerService.getTimerById(id);\n    return timer;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.msg) || 'Erreur lors de la récupération du chronomètre');\n  }\n});\nexport const startTimer = createAsyncThunk('timer/start', async (timerData, {\n  rejectWithValue\n}) => {\n  try {\n    const timer = await timerService.startTimer(timerData);\n    return timer;\n  } catch (error) {\n    var _error$response5;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'Erreur lors du démarrage du chronomètre');\n  }\n});\nexport const pauseTimer = createAsyncThunk('timer/pause', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const timer = await timerService.pauseTimer(id);\n    return timer;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.msg) || 'Erreur lors de la mise en pause du chronomètre');\n  }\n});\nexport const resumeTimer = createAsyncThunk('timer/resume', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const timer = await timerService.resumeTimer(id);\n    return timer;\n  } catch (error) {\n    var _error$response7;\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || 'Erreur lors de la reprise du chronomètre');\n  }\n});\nexport const stopTimer = createAsyncThunk('timer/stop', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const timer = await timerService.stopTimer(id);\n    return timer;\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    return rejectWithValue(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.msg) || 'Erreur lors de l\\'arrêt du chronomètre');\n  }\n});\nexport const deleteTimer = createAsyncThunk('timer/delete', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    await timerService.deleteTimer(id);\n    return id;\n  } catch (error) {\n    var _error$response9, _error$response9$data;\n    return rejectWithValue(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.msg) || 'Erreur lors de la suppression du chronomètre');\n  }\n});\nexport const fetchClientTimers = createAsyncThunk('timer/fetchByClient', async (clientId, {\n  rejectWithValue\n}) => {\n  try {\n    const timers = await timerService.getClientTimers(clientId);\n    return {\n      clientId,\n      timers\n    };\n  } catch (error) {\n    var _error$response10, _error$response10$dat;\n    return rejectWithValue(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.msg) || 'Erreur lors de la récupération des chronomètres du client');\n  }\n});\nexport const fetchTaskTimers = createAsyncThunk('timer/fetchByTask', async (taskId, {\n  rejectWithValue\n}) => {\n  try {\n    const timers = await timerService.getTaskTimers(taskId);\n    return {\n      taskId,\n      timers\n    };\n  } catch (error) {\n    var _error$response11, _error$response11$dat;\n    return rejectWithValue(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.msg) || 'Erreur lors de la récupération des chronomètres de la tâche');\n  }\n});\n\n// Slice\nconst timerSlice = createSlice({\n  name: 'timer',\n  initialState: {\n    timers: [],\n    runningTimer: null,\n    currentTimer: null,\n    clientTimers: {},\n    taskTimers: {},\n    loading: false,\n    error: null,\n    timerPopupVisible: false,\n    timerPopupSize: 'standard',\n    // 'compact', 'standard', 'expanded'\n    timerPopupPosition: {\n      x: 20,\n      y: 20\n    }\n  },\n  reducers: {\n    clearTimerError: state => {\n      state.error = null;\n    },\n    setCurrentTimer: (state, action) => {\n      state.currentTimer = action.payload;\n    },\n    clearCurrentTimer: state => {\n      state.currentTimer = null;\n    },\n    showTimerPopup: state => {\n      state.timerPopupVisible = true;\n    },\n    hideTimerPopup: state => {\n      state.timerPopupVisible = false;\n    },\n    setTimerPopupSize: (state, action) => {\n      state.timerPopupSize = action.payload;\n    },\n    setTimerPopupPosition: (state, action) => {\n      state.timerPopupPosition = action.payload;\n    },\n    updateRunningTimerDuration: state => {\n      if (state.runningTimer && state.runningTimer.isRunning) {\n        // Calculer la durée actuelle\n        const startTime = new Date(state.runningTimer.startTime).getTime();\n        const now = Date.now();\n        let totalDuration = Math.floor((now - startTime) / 1000);\n\n        // Soustraire le temps total de pause\n        totalDuration -= state.runningTimer.totalPausedTime || 0;\n\n        // Mettre à jour la durée\n        state.runningTimer.currentDuration = totalDuration;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // fetchAllTimers\n    .addCase(fetchAllTimers.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchAllTimers.fulfilled, (state, action) => {\n      state.loading = false;\n      state.timers = action.payload;\n    }).addCase(fetchAllTimers.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // fetchRunningTimer\n    .addCase(fetchRunningTimer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchRunningTimer.fulfilled, (state, action) => {\n      state.loading = false;\n      state.runningTimer = action.payload;\n\n      // Si un chronomètre est en cours, afficher la popup\n      if (action.payload) {\n        state.timerPopupVisible = true;\n      }\n    }).addCase(fetchRunningTimer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // fetchTimerById\n    .addCase(fetchTimerById.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchTimerById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentTimer = action.payload;\n\n      // Mettre à jour dans la liste complète si elle existe\n      const index = state.timers.findIndex(t => t._id === action.payload._id);\n      if (index !== -1) {\n        state.timers[index] = action.payload;\n      }\n    }).addCase(fetchTimerById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // startTimer\n    .addCase(startTimer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(startTimer.fulfilled, (state, action) => {\n      state.loading = false;\n      state.runningTimer = action.payload;\n      state.timerPopupVisible = true;\n\n      // Ajouter à la liste complète\n      state.timers.unshift(action.payload);\n\n      // Ajouter aux listes spécifiques si nécessaire\n      if (action.payload.clientId) {\n        const clientId = action.payload.clientId._id;\n        if (state.clientTimers[clientId]) {\n          state.clientTimers[clientId].unshift(action.payload);\n        }\n      }\n      if (action.payload.taskId) {\n        const taskId = action.payload.taskId._id;\n        if (state.taskTimers[taskId]) {\n          state.taskTimers[taskId].unshift(action.payload);\n        }\n      }\n    }).addCase(startTimer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // pauseTimer\n    .addCase(pauseTimer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(pauseTimer.fulfilled, (state, action) => {\n      state.loading = false;\n      state.runningTimer = action.payload;\n\n      // Mettre à jour dans la liste complète\n      const index = state.timers.findIndex(t => t._id === action.payload._id);\n      if (index !== -1) {\n        state.timers[index] = action.payload;\n      }\n\n      // Mettre à jour dans les listes spécifiques\n      if (action.payload.clientId) {\n        const clientId = action.payload.clientId._id;\n        if (state.clientTimers[clientId]) {\n          const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n          if (clientIndex !== -1) {\n            state.clientTimers[clientId][clientIndex] = action.payload;\n          }\n        }\n      }\n      if (action.payload.taskId) {\n        const taskId = action.payload.taskId._id;\n        if (state.taskTimers[taskId]) {\n          const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n          if (taskIndex !== -1) {\n            state.taskTimers[taskId][taskIndex] = action.payload;\n          }\n        }\n      }\n    }).addCase(pauseTimer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // resumeTimer\n    .addCase(resumeTimer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(resumeTimer.fulfilled, (state, action) => {\n      state.loading = false;\n      state.runningTimer = action.payload;\n\n      // Mettre à jour dans la liste complète\n      const index = state.timers.findIndex(t => t._id === action.payload._id);\n      if (index !== -1) {\n        state.timers[index] = action.payload;\n      }\n\n      // Mettre à jour dans les listes spécifiques\n      if (action.payload.clientId) {\n        const clientId = action.payload.clientId._id;\n        if (state.clientTimers[clientId]) {\n          const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n          if (clientIndex !== -1) {\n            state.clientTimers[clientId][clientIndex] = action.payload;\n          }\n        }\n      }\n      if (action.payload.taskId) {\n        const taskId = action.payload.taskId._id;\n        if (state.taskTimers[taskId]) {\n          const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n          if (taskIndex !== -1) {\n            state.taskTimers[taskId][taskIndex] = action.payload;\n          }\n        }\n      }\n    }).addCase(resumeTimer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // stopTimer\n    .addCase(stopTimer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(stopTimer.fulfilled, (state, action) => {\n      state.loading = false;\n      state.runningTimer = null;\n\n      // Mettre à jour dans la liste complète\n      const index = state.timers.findIndex(t => t._id === action.payload._id);\n      if (index !== -1) {\n        state.timers[index] = action.payload;\n      }\n\n      // Mettre à jour dans les listes spécifiques\n      if (action.payload.clientId) {\n        const clientId = action.payload.clientId._id;\n        if (state.clientTimers[clientId]) {\n          const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n          if (clientIndex !== -1) {\n            state.clientTimers[clientId][clientIndex] = action.payload;\n          }\n        }\n      }\n      if (action.payload.taskId) {\n        const taskId = action.payload.taskId._id;\n        if (state.taskTimers[taskId]) {\n          const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n          if (taskIndex !== -1) {\n            state.taskTimers[taskId][taskIndex] = action.payload;\n          }\n        }\n      }\n    }).addCase(stopTimer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // deleteTimer\n    .addCase(deleteTimer.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(deleteTimer.fulfilled, (state, action) => {\n      state.loading = false;\n\n      // Supprimer de la liste complète\n      state.timers = state.timers.filter(t => t._id !== action.payload);\n\n      // Supprimer des listes spécifiques\n      Object.keys(state.clientTimers).forEach(clientId => {\n        state.clientTimers[clientId] = state.clientTimers[clientId].filter(t => t._id !== action.payload);\n      });\n      Object.keys(state.taskTimers).forEach(taskId => {\n        state.taskTimers[taskId] = state.taskTimers[taskId].filter(t => t._id !== action.payload);\n      });\n\n      // Réinitialiser le chronomètre en cours si nécessaire\n      if (state.runningTimer && state.runningTimer._id === action.payload) {\n        state.runningTimer = null;\n      }\n\n      // Réinitialiser le chronomètre courant si nécessaire\n      if (state.currentTimer && state.currentTimer._id === action.payload) {\n        state.currentTimer = null;\n      }\n    }).addCase(deleteTimer.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // fetchClientTimers\n    .addCase(fetchClientTimers.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchClientTimers.fulfilled, (state, action) => {\n      state.loading = false;\n      state.clientTimers[action.payload.clientId] = action.payload.timers;\n    }).addCase(fetchClientTimers.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // fetchTaskTimers\n    .addCase(fetchTaskTimers.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchTaskTimers.fulfilled, (state, action) => {\n      state.loading = false;\n      state.taskTimers[action.payload.taskId] = action.payload.timers;\n    }).addCase(fetchTaskTimers.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearTimerError,\n  setCurrentTimer,\n  clearCurrentTimer,\n  showTimerPopup,\n  hideTimerPopup,\n  setTimerPopupSize,\n  setTimerPopupPosition,\n  updateRunningTimerDuration\n} = timerSlice.actions;\nexport default timerSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","timerService","fetchAllTimers","_","rejectWithValue","timers","getAllTimers","error","_error$response","_error$response$data","response","data","msg","fetchRunningTimer","timer","getRunningTimer","_error$response2","_error$response3","_error$response3$data","status","fetchTimerById","id","getTimerById","_error$response4","_error$response4$data","startTimer","timerData","_error$response5","pauseTimer","_error$response6","_error$response6$data","resumeTimer","_error$response7","stopTimer","_error$response8","_error$response8$data","deleteTimer","_error$response9","_error$response9$data","fetchClientTimers","clientId","getClientTimers","_error$response10","_error$response10$dat","fetchTaskTimers","taskId","getTaskTimers","_error$response11","_error$response11$dat","timerSlice","name","initialState","runningTimer","currentTimer","clientTimers","taskTimers","loading","timerPopupVisible","timerPopupSize","timerPopupPosition","x","y","reducers","clearTimerError","state","setCurrentTimer","action","payload","clearCurrentTimer","showTimerPopup","hideTimerPopup","setTimerPopupSize","setTimerPopupPosition","updateRunningTimerDuration","isRunning","startTime","Date","getTime","now","totalDuration","Math","floor","totalPausedTime","currentDuration","extraReducers","builder","addCase","pending","fulfilled","rejected","index","findIndex","t","_id","unshift","clientIndex","taskIndex","filter","Object","keys","forEach","actions","reducer"],"sources":["C:/Users/Steve/Documents/Dernier projet task manager/task-manager-complete-main (1)/task-manager-complete-main/frontend/src/store/slices/timerSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { timerService } from '../../services/api';\n\n// Thunks\nexport const fetchAllTimers = createAsyncThunk(\n  'timer/fetchAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      const timers = await timerService.getAllTimers();\n      return timers;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération des chronomètres');\n    }\n  }\n);\n\nexport const fetchRunningTimer = createAsyncThunk(\n  'timer/fetchRunning',\n  async (_, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.getRunningTimer();\n      return timer;\n    } catch (error) {\n      if (error.response?.status === 404) {\n        return null; // Pas de chronomètre en cours\n      }\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération du chronomètre en cours');\n    }\n  }\n);\n\nexport const fetchTimerById = createAsyncThunk(\n  'timer/fetchById',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.getTimerById(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération du chronomètre');\n    }\n  }\n);\n\nexport const startTimer = createAsyncThunk(\n  'timer/start',\n  async (timerData, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.startTimer(timerData);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data || 'Erreur lors du démarrage du chronomètre');\n    }\n  }\n);\n\nexport const pauseTimer = createAsyncThunk(\n  'timer/pause',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.pauseTimer(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la mise en pause du chronomètre');\n    }\n  }\n);\n\nexport const resumeTimer = createAsyncThunk(\n  'timer/resume',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.resumeTimer(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data || 'Erreur lors de la reprise du chronomètre');\n    }\n  }\n);\n\nexport const stopTimer = createAsyncThunk(\n  'timer/stop',\n  async (id, { rejectWithValue }) => {\n    try {\n      const timer = await timerService.stopTimer(id);\n      return timer;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de l\\'arrêt du chronomètre');\n    }\n  }\n);\n\nexport const deleteTimer = createAsyncThunk(\n  'timer/delete',\n  async (id, { rejectWithValue }) => {\n    try {\n      await timerService.deleteTimer(id);\n      return id;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la suppression du chronomètre');\n    }\n  }\n);\n\nexport const fetchClientTimers = createAsyncThunk(\n  'timer/fetchByClient',\n  async (clientId, { rejectWithValue }) => {\n    try {\n      const timers = await timerService.getClientTimers(clientId);\n      return { clientId, timers };\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération des chronomètres du client');\n    }\n  }\n);\n\nexport const fetchTaskTimers = createAsyncThunk(\n  'timer/fetchByTask',\n  async (taskId, { rejectWithValue }) => {\n    try {\n      const timers = await timerService.getTaskTimers(taskId);\n      return { taskId, timers };\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.msg || 'Erreur lors de la récupération des chronomètres de la tâche');\n    }\n  }\n);\n\n// Slice\nconst timerSlice = createSlice({\n  name: 'timer',\n  initialState: {\n    timers: [],\n    runningTimer: null,\n    currentTimer: null,\n    clientTimers: {},\n    taskTimers: {},\n    loading: false,\n    error: null,\n    timerPopupVisible: false,\n    timerPopupSize: 'standard', // 'compact', 'standard', 'expanded'\n    timerPopupPosition: { x: 20, y: 20 }\n  },\n  reducers: {\n    clearTimerError: (state) => {\n      state.error = null;\n    },\n    setCurrentTimer: (state, action) => {\n      state.currentTimer = action.payload;\n    },\n    clearCurrentTimer: (state) => {\n      state.currentTimer = null;\n    },\n    showTimerPopup: (state) => {\n      state.timerPopupVisible = true;\n    },\n    hideTimerPopup: (state) => {\n      state.timerPopupVisible = false;\n    },\n    setTimerPopupSize: (state, action) => {\n      state.timerPopupSize = action.payload;\n    },\n    setTimerPopupPosition: (state, action) => {\n      state.timerPopupPosition = action.payload;\n    },\n    updateRunningTimerDuration: (state) => {\n      if (state.runningTimer && state.runningTimer.isRunning) {\n        // Calculer la durée actuelle\n        const startTime = new Date(state.runningTimer.startTime).getTime();\n        const now = Date.now();\n        let totalDuration = Math.floor((now - startTime) / 1000);\n        \n        // Soustraire le temps total de pause\n        totalDuration -= state.runningTimer.totalPausedTime || 0;\n        \n        // Mettre à jour la durée\n        state.runningTimer.currentDuration = totalDuration;\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // fetchAllTimers\n      .addCase(fetchAllTimers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchAllTimers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.timers = action.payload;\n      })\n      .addCase(fetchAllTimers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchRunningTimer\n      .addCase(fetchRunningTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchRunningTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        \n        // Si un chronomètre est en cours, afficher la popup\n        if (action.payload) {\n          state.timerPopupVisible = true;\n        }\n      })\n      .addCase(fetchRunningTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchTimerById\n      .addCase(fetchTimerById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTimerById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentTimer = action.payload;\n        \n        // Mettre à jour dans la liste complète si elle existe\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n      })\n      .addCase(fetchTimerById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // startTimer\n      .addCase(startTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(startTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        state.timerPopupVisible = true;\n        \n        // Ajouter à la liste complète\n        state.timers.unshift(action.payload);\n        \n        // Ajouter aux listes spécifiques si nécessaire\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            state.clientTimers[clientId].unshift(action.payload);\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            state.taskTimers[taskId].unshift(action.payload);\n          }\n        }\n      })\n      .addCase(startTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // pauseTimer\n      .addCase(pauseTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(pauseTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        \n        // Mettre à jour dans la liste complète\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n        \n        // Mettre à jour dans les listes spécifiques\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n            if (clientIndex !== -1) {\n              state.clientTimers[clientId][clientIndex] = action.payload;\n            }\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n            if (taskIndex !== -1) {\n              state.taskTimers[taskId][taskIndex] = action.payload;\n            }\n          }\n        }\n      })\n      .addCase(pauseTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // resumeTimer\n      .addCase(resumeTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(resumeTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = action.payload;\n        \n        // Mettre à jour dans la liste complète\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n        \n        // Mettre à jour dans les listes spécifiques\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n            if (clientIndex !== -1) {\n              state.clientTimers[clientId][clientIndex] = action.payload;\n            }\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n            if (taskIndex !== -1) {\n              state.taskTimers[taskId][taskIndex] = action.payload;\n            }\n          }\n        }\n      })\n      .addCase(resumeTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // stopTimer\n      .addCase(stopTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(stopTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        state.runningTimer = null;\n        \n        // Mettre à jour dans la liste complète\n        const index = state.timers.findIndex(t => t._id === action.payload._id);\n        if (index !== -1) {\n          state.timers[index] = action.payload;\n        }\n        \n        // Mettre à jour dans les listes spécifiques\n        if (action.payload.clientId) {\n          const clientId = action.payload.clientId._id;\n          if (state.clientTimers[clientId]) {\n            const clientIndex = state.clientTimers[clientId].findIndex(t => t._id === action.payload._id);\n            if (clientIndex !== -1) {\n              state.clientTimers[clientId][clientIndex] = action.payload;\n            }\n          }\n        }\n        \n        if (action.payload.taskId) {\n          const taskId = action.payload.taskId._id;\n          if (state.taskTimers[taskId]) {\n            const taskIndex = state.taskTimers[taskId].findIndex(t => t._id === action.payload._id);\n            if (taskIndex !== -1) {\n              state.taskTimers[taskId][taskIndex] = action.payload;\n            }\n          }\n        }\n      })\n      .addCase(stopTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // deleteTimer\n      .addCase(deleteTimer.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(deleteTimer.fulfilled, (state, action) => {\n        state.loading = false;\n        \n        // Supprimer de la liste complète\n        state.timers = state.timers.filter(t => t._id !== action.payload);\n        \n        // Supprimer des listes spécifiques\n        Object.keys(state.clientTimers).forEach(clientId => {\n          state.clientTimers[clientId] = state.clientTimers[clientId].filter(t => t._id !== action.payload);\n        });\n        \n        Object.keys(state.taskTimers).forEach(taskId => {\n          state.taskTimers[taskId] = state.taskTimers[taskId].filter(t => t._id !== action.payload);\n        });\n        \n        // Réinitialiser le chronomètre en cours si nécessaire\n        if (state.runningTimer && state.runningTimer._id === action.payload) {\n          state.runningTimer = null;\n        }\n        \n        // Réinitialiser le chronomètre courant si nécessaire\n        if (state.currentTimer && state.currentTimer._id === action.payload) {\n          state.currentTimer = null;\n        }\n      })\n      .addCase(deleteTimer.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchClientTimers\n      .addCase(fetchClientTimers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchClientTimers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.clientTimers[action.payload.clientId] = action.payload.timers;\n      })\n      .addCase(fetchClientTimers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // fetchTaskTimers\n      .addCase(fetchTaskTimers.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTaskTimers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.taskTimers[action.payload.taskId] = action.payload.timers;\n      })\n      .addCase(fetchTaskTimers.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { \n  clearTimerError, \n  setCurrentTimer, \n  clearCurrentTimer,\n  showTimerPopup,\n  hideTimerPopup,\n  setTimerPopupSize,\n  setTimerPopupPosition,\n  updateRunningTimerDuration\n} = timerSlice.actions;\n\nexport default timerSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}